<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兔子的个人博客</title>
  
  <subtitle>咸鱼也是可以有梦想的！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://proudrabbit.gitee.io/"/>
  <updated>2020-07-03T05:39:59.532Z</updated>
  <id>https://proudrabbit.gitee.io/</id>
  
  <author>
    <name>路痴的兔子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IIC通讯协议</title>
    <link href="https://proudrabbit.gitee.io/IIC%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.html"/>
    <id>https://proudrabbit.gitee.io/IIC%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.html</id>
    <published>2020-07-03T04:48:10.000Z</published>
    <updated>2020-07-03T05:39:59.532Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="IIC通讯协议"><a href="#IIC通讯协议" class="headerlink" title="IIC通讯协议"></a>IIC通讯协议</h1><p>简单介绍下<code>IIC</code>的通讯时序，然后给出51单片机实现的代码。</p><a id="more"></a><h1 id="1-通讯协议"><a href="#1-通讯协议" class="headerlink" title="1. 通讯协议"></a>1. 通讯协议</h1><p><code>IIC</code>总线在传送数据过程中有三种类型信号，分别是：开始信号、结束信号和应答信号。</p><ul><li>开始信号：<code>SCL</code>为高电平时，<code>SDA</code>由高电平向低电平跳变，开始传送数据。</li><li>结束信号：<code>SCL</code>为高电平时，<code>SDA</code>由低电平向高电平跳变，结束传送数据。</li><li>应答信号：接收数据的<code>IC</code>在接收到<code>8bit</code>数据后，向发送数据的<code>IC</code>发出特定的低电平脉冲，表示已收到数据。<code>CPU</code>向受控单元发出一个信号后，等待受控单元发出一个应答信号，<code>CPU</code>接收到应答信号后，根据实际情况做出是否继续传递信号的判断。若未接收到应答信号，则判断为受控单元出现故障。</li></ul><p><code>IIC</code>总线时序图片如下。</p><p><img src="https://i.loli.net/2020/07/03/sLBifAI9etqoDcu.png" alt="IIC总线时序图"></p><h1 id="2-51单片机程序代码"><a href="#2-51单片机程序代码" class="headerlink" title="2. 51单片机程序代码"></a>2. 51单片机程序代码</h1><h2 id="2-1-使用的IO口"><a href="#2-1-使用的IO口" class="headerlink" title="2.1 使用的IO口"></a>2.1 使用的IO口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---定义IIC接口---//</span></span><br><span class="line">sbit IIC_SCL = P2^<span class="number">1</span>;</span><br><span class="line">sbit IIC_SDA = P2^<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="2-2-延时函数"><a href="#2-2-延时函数" class="headerlink" title="2.2 延时函数"></a>2.2 延时函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment">延时4微秒(STC89C51，晶振频率12MHz)</span></span><br><span class="line"><span class="comment">不同的单片机,需要调整此函数</span></span><br><span class="line"><span class="comment">**************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_4us</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-IIC驱动代码"><a href="#2-3-IIC驱动代码" class="headerlink" title="2.3 IIC驱动代码"></a>2.3 IIC驱动代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名      : IIC_Start</span></span><br><span class="line"><span class="comment">* 功能: IIC启动信号</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Stop</span></span><br><span class="line"><span class="comment">* 功能: IIC停止信号</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_WaitAck</span></span><br><span class="line"><span class="comment">* 功能: 等待Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: BYTE 1接收应答失败 0接收应答成功</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function">BYTE <span class="title">IIC_WaitAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE errtime = <span class="number">0</span>;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (IIC_SDA)</span><br><span class="line">&#123;</span><br><span class="line">errtime++;</span><br><span class="line"><span class="keyword">if</span>(errtime&gt;<span class="number">250</span>)</span><br><span class="line">&#123;</span><br><span class="line">IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Ack</span></span><br><span class="line"><span class="comment">* 功能: 产生Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_nAck</span></span><br><span class="line"><span class="comment">* 功能: 不产生Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_nAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Send_Byte</span></span><br><span class="line"><span class="comment">* 功能: 发送一个字节</span></span><br><span class="line"><span class="comment">* 输入: BYTE dat</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Send_Byte</span><span class="params">(BYTE dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE t = <span class="number">0</span>;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SDA = ((dat&amp;<span class="number">0x80</span>)&gt;&gt;<span class="number">7</span>);</span><br><span class="line">dat &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Read_Byte</span></span><br><span class="line"><span class="comment">* 功能: 读取一个字节</span></span><br><span class="line"><span class="comment">* 输入: BYTE ack 1为发送ACK 0为发送nACK</span></span><br><span class="line"><span class="comment">* 输出: BYTE</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function">BYTE <span class="title">IIC_Read_Byte</span><span class="params">(BYTE ack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE i,receive = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">receive &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(IIC_SDA==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">receive++;</span><br><span class="line">&#125;</span><br><span class="line">Delay_4us();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ack)</span><br><span class="line">&#123;</span><br><span class="line">IIC_Ack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_nAck();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> receive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;IIC通讯协议&quot;&gt;&lt;a href=&quot;#IIC通讯协议&quot; class=&quot;headerlink&quot; title=&quot;IIC通讯协议&quot;&gt;&lt;/a&gt;IIC通讯协议&lt;/h1&gt;&lt;p&gt;简单介绍下&lt;code&gt;IIC&lt;/code&gt;的通讯时序，然后给出51单片机实现的代码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IIC" scheme="https://proudrabbit.gitee.io/tags/IIC/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH连接电脑</title>
    <link href="https://proudrabbit.gitee.io/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.html"/>
    <id>https://proudrabbit.gitee.io/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.html</id>
    <published>2020-07-02T04:10:02.000Z</published>
    <updated>2020-07-02T05:17:28.660Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="如何使用SSH来远程连接电脑"><a href="#如何使用SSH来远程连接电脑" class="headerlink" title="如何使用SSH来远程连接电脑"></a>如何使用SSH来远程连接电脑</h1><p>本篇文章主要是描述如何使用<code>SSH</code>来远程连接<code>Linux</code>主机（Ubuntu）的用户，也适用于其他的Linux发行版。</p><a id="more"></a><h2 id="1-客户端安装SSH"><a href="#1-客户端安装SSH" class="headerlink" title="1. 客户端安装SSH"></a>1. 客户端安装SSH</h2><h3 id="1-1-Ubuntu"><a href="#1-1-Ubuntu" class="headerlink" title="1.1 Ubuntu"></a>1.1 Ubuntu</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install SSH</span><br></pre></td></tr></table></figure><h3 id="1-2-Windows"><a href="#1-2-Windows" class="headerlink" title="1.2 Windows"></a>1.2 Windows</h3><p>Windows 10 1809默认安装了<code>OpenSSH</code>，无需安装。</p><h2 id="2-服务器安装SSH-server"><a href="#2-服务器安装SSH-server" class="headerlink" title="2. 服务器安装SSH-server"></a>2. 服务器安装SSH-server</h2><p>由于安装方式和第一步一样，这里就之列出<code>Ubuntu</code>下的安装方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install SSH-server</span><br></pre></td></tr></table></figure><p><strong>PS：到这里已经可以连接了，下面是使用SSH免密登录，可以使用 <code>Ssh 用户名@服务器地址</code> 来连接服务器</strong></p><h2 id="3-客户端生成公私钥"><a href="#3-客户端生成公私钥" class="headerlink" title="3. 客户端生成公私钥"></a>3. 客户端生成公私钥</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>文件位置在用户家目录下，如<code>Ubuntu</code>下就在<code>~/.ssh</code>下，由于是隐藏文件，请打开显示隐藏文件查看。</p><h2 id="4-上传公钥到服务器"><a href="#4-上传公钥到服务器" class="headerlink" title="4. 上传公钥到服务器"></a>4. 上传公钥到服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -p <span class="number">22</span> 用户名@服务器IP地址</span><br></pre></td></tr></table></figure><p>提示授权时 输入yes回车，然后提示输入服务器用户的密码。 手动复制到服务器上也行。</p><hr><p>手动复制如下，</p><blockquote><p>将客户端的<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件内的内容复制<br>粘贴到服务器端的<code>.ssh</code>文件夹下的<code>authorized_keys</code>文件内。<br>如果服务器端<code>authorized_keys</code>文件不存在，请自行创建。</p></blockquote><h2 id="5-连接服务器"><a href="#5-连接服务器" class="headerlink" title="5. 连接服务器"></a>5. 连接服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@服务器地址</span><br></pre></td></tr></table></figure><h2 id="6-给服务器取别名，免除每次要输入地址"><a href="#6-给服务器取别名，免除每次要输入地址" class="headerlink" title="6. 给服务器取别名，免除每次要输入地址"></a>6. 给服务器取别名，免除每次要输入地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/<span class="built_in">config</span>  </span><br><span class="line"></span><br><span class="line">vim ~/.ssh/<span class="built_in">config</span></span><br></pre></td></tr></table></figure><p>然后在文件里输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">HostName 服务器IP地址</span><br><span class="line">User 你要连接的服务器上的用户名</span><br><span class="line">Port <span class="number">22</span></span><br></pre></td></tr></table></figure><p>然后客户端使用<code>ssh 别名</code>即可连接服务器。<br>其实就是使用别名来代替用户名@IP这一串字符，22是SSH默认使用的端口号，不建议修改。</p><h2 id="7-文件传输"><a href="#7-文件传输" class="headerlink" title="7. 文件传输"></a>7. 文件传输</h2><ol><li><p>传文件的话，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp 文件 用户名@域名/ip:服务器上的路径</span><br></pre></td></tr></table></figure><p>如果使用config文件配置过名称后，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 文件 别名:服务器上的路径</span><br></pre></td></tr></table></figure></li><li><p>同理，传送文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 文件夹 用户名@域名/ip:服务器上的路径</span><br></pre></td></tr></table></figure></li><li><p>下载远程文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp 用户名@域名/ip:远程文件的路径 本地路径</span><br></pre></td></tr></table></figure></li><li><p>下载远程文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp -r 用户名@域名/ip:远程文件夹的路径 本地路径</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>PS：如果需要连接<code>root</code>账号，需要修改服务器<code>/etc/ssh/sshd_config文件</code>,然后输入<code>service ssh restart</code>重启SSH服务。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#PermitRootLogin no   改为  PermitRootLogin yes；</span><br></pre></td></tr></table></figure><hr><h2 id="8-可能会用到的一些SSH命令"><a href="#8-可能会用到的一些SSH命令" class="headerlink" title="8. 可能会用到的一些SSH命令"></a>8. 可能会用到的一些SSH命令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证命令</span></span><br><span class="line">ssh -T 用户名@域名/ip</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;如何使用SSH来远程连接电脑&quot;&gt;&lt;a href=&quot;#如何使用SSH来远程连接电脑&quot; class=&quot;headerlink&quot; title=&quot;如何使用SSH来远程连接电脑&quot;&gt;&lt;/a&gt;如何使用SSH来远程连接电脑&lt;/h1&gt;&lt;p&gt;本篇文章主要是描述如何使用&lt;code&gt;SSH&lt;/code&gt;来远程连接&lt;code&gt;Linux&lt;/code&gt;主机（Ubuntu）的用户，也适用于其他的Linux发行版。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSH" scheme="https://proudrabbit.gitee.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://proudrabbit.gitee.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>https://proudrabbit.gitee.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</id>
    <published>2020-06-20T14:21:00.000Z</published>
    <updated>2020-06-20T14:58:07.360Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><p>常用的正则表达式字符集，以及正则表达式中的贪婪匹配和非贪婪匹配。</p><a id="more"></a><h1 id="一-基础正则表达式字符集"><a href="#一-基础正则表达式字符集" class="headerlink" title="一. 基础正则表达式字符集"></a>一. 基础正则表达式字符集</h1><table><thead><tr><th align="left">RE字符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td align="left">.</td><td>匹配任意字符，不能匹配换行符</td><td>查找e e, eee, e任意一个字符e，但不能是ee：grep -n “e.e” regular.txt</td></tr><tr><td align="left">*</td><td>重复零个到无穷多个的前一个RE字符</td><td>找出含有es, ess, esss等字符串：grep -n “ess*” regular.txt</td></tr><tr><td align="left">?</td><td>零个或一个的前一个RE字符</td><td>查找gd, god这两个字符串：grep -n “go?d” regluar.txt</td></tr><tr><td align="left">^word</td><td>待查找的字符串（word）在行首</td><td>查找行首为 # 开始的那一行：grep -n “^#” regular.txt</td></tr><tr><td align="left">Word$</td><td>待查找的字符串（word）在行尾</td><td>将行尾为 ！ 的那一行打印出来：grep -n “!$” regular.txt</td></tr><tr><td align="left">\</td><td>转义字符，将特殊符号的特殊意义去除</td><td>查找含有单引号 ‘ 的那一行：grep -n “&#39;“ regular.txt</td></tr><tr><td align="left">[list]</td><td>字符集合的RE字符，里面列出想要选取的字符</td><td>查找含有gl或gd的那一行：grep -n “g[ld]” regular.txt</td></tr><tr><td align="left">[n1-n2]</td><td>字符集合的RE字符，里面列出想要选取的字符范围</td><td>查找含有任意数字的那一行：grep -n “[0-9]” regular.txt</td></tr><tr><td align="left">[^list]</td><td>字符集合的RE字符，里面列出不想要选取的字符串或范围</td><td>查找字符串可以是oog, ood, 但不能是oot：grep -n “oo[^t]“ regular.txt</td></tr><tr><td align="left">{n, m}</td><td>连续n到m个的【前一个RE字符】</td><td>在ｇ与ｇ之间有2个到3个的ｏ存在的字符串，亦即goog, gooog：grep -n “go{2, 3}g” regular.txt</td></tr><tr><td align="left">{n}</td><td>连续n个的前一个RE字符</td><td></td></tr><tr><td align="left">{n, }</td><td>连续n个以上的前一个RE字符</td><td></td></tr></tbody></table><h1 id="二-扩展正则表达式字符集"><a href="#二-扩展正则表达式字符集" class="headerlink" title="二. 扩展正则表达式字符集"></a>二. 扩展正则表达式字符集</h1><table><thead><tr><th align="left">RE字符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td align="left">+</td><td>重复【一个或一个以上】的前一个RE字符</td><td>查找god, good, goood等字符串：grep -n “go+d” regular.txt</td></tr><tr><td align="left">|</td><td>用或（or）的方式找出数个字符串</td><td>查找gd或good这两个字符串：grep -n “gd|good” regular.txt</td></tr><tr><td align="left">( )</td><td>找出【群组】字符串</td><td>查找glad或good这两个字符串，因为ｇ和ｄ是重复的，所以可以将la和oo列于( )中，并以｜来分隔：grep -n “g(la|oo)d” regular.txt</td></tr><tr><td align="left">( )+</td><td>多个重复群组的判别</td><td>查找开头是A结尾是C，中间有一个以上的”xyz”字符串：grep -n “A(xyz)+C”</td></tr></tbody></table><h1 id="三-贪婪和非贪婪模式"><a href="#三-贪婪和非贪婪模式" class="headerlink" title="三. 贪婪和非贪婪模式"></a>三. 贪婪和非贪婪模式</h1><h2 id="1-什么是贪婪和非贪婪模式"><a href="#1-什么是贪婪和非贪婪模式" class="headerlink" title="1. 什么是贪婪和非贪婪模式"></a>1. 什么是贪婪和非贪婪模式</h2><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">"abcaxc"</span>;</span><br><span class="line">Patter p1 = <span class="string">"ab.*c"</span>;</span><br><span class="line">Patter p2 = <span class="string">"ab.*?c"</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>贪婪匹配</strong>：正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式<code>p1</code>匹配字符串<code>str</code>，结果就是匹配到：<code>abcaxc</code> 使用的是<code>(ab.*c)</code>。</li><li><strong>非贪婪匹配</strong>：就是匹配到结果就好，最少的匹配字符。如上面使用模式<code>p2</code>匹配字符串<code>str</code>，结果就是匹配到：<code>abc</code> 使用的是<code>(ab.*?c)</code>。<h2 id="2-编程中如何区分两种模式"><a href="#2-编程中如何区分两种模式" class="headerlink" title="2. 编程中如何区分两种模式"></a>2. 编程中如何区分两种模式</h2>==<strong>默认是贪婪模式；在量词后面直接加上一个问号 ？就是非贪婪模式。</strong>==</li></ul><p><strong>如：A(.*?)C，使用非贪婪模式匹配获取以Ａ开头Ｃ结尾，中间有任意多个任意字符的字符串。</strong></p><blockquote><p>量词：{m,n}：m到n个</p><p>. ：任意多个</p><p>+：一个到多个</p><p>？：0或一个</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;常用的正则表达式字符集，以及正则表达式中的贪婪匹配和非贪婪匹配。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="正则表达式" scheme="https://proudrabbit.gitee.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="RE" scheme="https://proudrabbit.gitee.io/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Word中如何找回取消保存的文档内容</title>
    <link href="https://proudrabbit.gitee.io/Word%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%BE%E5%9B%9E%E5%8F%96%E6%B6%88%E4%BF%9D%E5%AD%98%E7%9A%84%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9.html"/>
    <id>https://proudrabbit.gitee.io/Word%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%BE%E5%9B%9E%E5%8F%96%E6%B6%88%E4%BF%9D%E5%AD%98%E7%9A%84%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9.html</id>
    <published>2020-05-08T12:37:27.000Z</published>
    <updated>2020-05-08T13:24:59.418Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="关于如何找回Word中修改后却点了取消保存的内容"><a href="#关于如何找回Word中修改后却点了取消保存的内容" class="headerlink" title="关于如何找回Word中修改后却点了取消保存的内容"></a>关于如何找回Word中修改后却点了取消保存的内容</h1><p><strong>首先重要的事情说三遍，<code>Ctrl+S</code>勤按,<code>Ctrl+S</code>勤按,<code>Ctrl+S</code>勤按</strong>，这毕竟只是一个补救办法，还是会丢失一点内容的。 如果文件比较重要，建议同时使用 <code>Git</code> 进行跟踪。</p><p>以下是解决办法。</p><a id="more"></a><p>因为word有自动备份功能，所以可以找回未保存的文档内容，<strong><em>找回上一次自动保存的内容</em></strong></p><p>首先打开Word，然后点击文件－＞信息－＞管理文档－＞恢复未保存的文档<br><img src="https://i.loli.net/2020/05/08/Ic2ZlzVsRgANBb4.png" alt="image-20200508205246059"></p><p>然后会弹出对话框，让你寻找需要恢复的<code>.asd</code>文件，然后选择和你未保存的同名文件点击确定即可。<em>我这里因为恢复过了，所以没有文件</em></p><p><img src="https://i.loli.net/2020/05/08/ic36OAEeyzkgqfo.png" alt="批注 2020-05-08 210127"></p><p><strong>PS：如果该目录下找不到文件的话，请打开选项 -&gt; 保存 下的文档位置寻找<code>.asd</code>文件。注意，该选项上的功能如果没有勾选上的话，也是不能找回的。</strong><br><img src="https://i.loli.net/2020/05/08/IMcw6SYV7gziE3s.png" alt="批注 2020-05-08 210646"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;关于如何找回Word中修改后却点了取消保存的内容&quot;&gt;&lt;a href=&quot;#关于如何找回Word中修改后却点了取消保存的内容&quot; class=&quot;headerlink&quot; title=&quot;关于如何找回Word中修改后却点了取消保存的内容&quot;&gt;&lt;/a&gt;关于如何找回Word中修改后却点了取消保存的内容&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先重要的事情说三遍，&lt;code&gt;Ctrl+S&lt;/code&gt;勤按,&lt;code&gt;Ctrl+S&lt;/code&gt;勤按,&lt;code&gt;Ctrl+S&lt;/code&gt;勤按&lt;/strong&gt;，这毕竟只是一个补救办法，还是会丢失一点内容的。 如果文件比较重要，建议同时使用 &lt;code&gt;Git&lt;/code&gt; 进行跟踪。&lt;/p&gt;&lt;p&gt;以下是解决办法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>git commit --amend</title>
    <link href="https://proudrabbit.gitee.io/git-commit-amend%E8%B8%A9%E5%9D%91.html"/>
    <id>https://proudrabbit.gitee.io/git-commit-amend%E8%B8%A9%E5%9D%91.html</id>
    <published>2020-03-14T09:16:26.000Z</published>
    <updated>2020-04-19T05:55:15.456Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><p>因为改动比较小，所以我不想重建一个commit，于是我是用了<code>git commit --amend</code>命令,由于之前已经将该commit推送到远程仓库，导致修改后推送失败。百度后发现如果你的commit已经push到了远程仓库，那么使用<code>--amend</code>修改commit后，<code>git push</code>时一定要使用 <code>--force-with-lease</code> 参数来强制推送，否则就会报错。</p><a id="more"></a><h1 id="这是我自己推送失败的例子"><a href="#这是我自己推送失败的例子" class="headerlink" title="这是我自己推送失败的例子"></a>这是我自己推送失败的例子</h1><p><img src="https://i.loli.net/2020/03/14/oTx6a7ZyFP23gmE.png" alt="image-20200314172358176"></p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><h2 id="一、第一种"><a href="#一、第一种" class="headerlink" title="一、第一种"></a>一、第一种</h2><p>使用后<code>git commit --amend -m &quot;修改Git学习(三)指令&quot;</code></p><p>==<strong>注意：-m “这里的内容和要追加的commit相同即可”，当然你也可以修改</strong>==</p><p>推送时使用<code>git push --force-with-lease gitee Backup</code>命令。</p><p>百度到的教程来自于CSDN博主 <a href="https://blog.csdn.net/weixin_38669561/article/details/103385514" target="_blank" rel="noopener">无色云</a></p><h2 id="二、第二种"><a href="#二、第二种" class="headerlink" title="二、第二种"></a>二、第二种</h2><p><strong>这种用处不大，不建议使用，<del>因为无异于脱裤子放屁</del>。</strong></p><p>根据提示先从远程仓库git pull下来，然后修改冲突的文件后再git add git commit最后再git push</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;因为改动比较小，所以我不想重建一个commit，于是我是用了&lt;code&gt;git commit --amend&lt;/code&gt;命令,由于之前已经将该commit推送到远程仓库，导致修改后推送失败。百度后发现如果你的commit已经push到了远程仓库，那么使用&lt;code&gt;--amend&lt;/code&gt;修改commit后，&lt;code&gt;git push&lt;/code&gt;时一定要使用 &lt;code&gt;--force-with-lease&lt;/code&gt; 参数来强制推送，否则就会报错。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="https://proudrabbit.gitee.io/tags/Git/"/>
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Bug" scheme="https://proudrabbit.gitee.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Visio绘图怎么对齐连接点</title>
    <link href="https://proudrabbit.gitee.io/Visio%E7%BB%98%E5%9B%BE%E6%80%8E%E4%B9%88%E5%AF%B9%E9%BD%90%E8%BF%9E%E6%8E%A5%E7%82%B9.html"/>
    <id>https://proudrabbit.gitee.io/Visio%E7%BB%98%E5%9B%BE%E6%80%8E%E4%B9%88%E5%AF%B9%E9%BD%90%E8%BF%9E%E6%8E%A5%E7%82%B9.html</id>
    <published>2020-03-13T13:13:00.000Z</published>
    <updated>2020-03-13T13:37:43.184Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><p>以前在使用Visio绘图时，不会对齐连接点，导致箭头画的很糟糕，一番摸索后搞定了这个问题，<del>以前画的箭头简直不能看</del>。</p><a id="more"></a><h1 id="1-首先将框图对齐"><a href="#1-首先将框图对齐" class="headerlink" title="1. 首先将框图对齐"></a>1. 首先将框图对齐</h1><p><img src="https://i.loli.net/2020/03/13/VRXTLy46IUbN1dh.png" alt="image-20200313211859242"></p><h1 id="2-然后水平向右拉出一段箭头做基准线"><a href="#2-然后水平向右拉出一段箭头做基准线" class="headerlink" title="2.然后水平向右拉出一段箭头做基准线"></a>2.然后水平向右拉出一段箭头做基准线</h1><p><img src="https://i.loli.net/2020/03/13/IXHhcumSQgMLRre.png" alt="image-20200313212132865"></p><p><em><del>别问我箭头画的什么鬼</del></em></p><h1 id="3-从顶部标尺下拉下一条基准线，对齐上面画的箭头"><a href="#3-从顶部标尺下拉下一条基准线，对齐上面画的箭头" class="headerlink" title="3.从顶部标尺下拉下一条基准线，对齐上面画的箭头"></a>3.从顶部标尺下拉下一条基准线，对齐上面画的箭头</h1><p><img src="https://i.loli.net/2020/03/13/qLfaC2K6xMOUElh.png" alt="image-20200313212708749"></p><h1 id="4-根据交点添加连接点，然后连接后删除基准线即可"><a href="#4-根据交点添加连接点，然后连接后删除基准线即可" class="headerlink" title="4. 根据交点添加连接点，然后连接后删除基准线即可"></a>4. 根据交点添加连接点，然后连接后删除基准线即可</h1><p><img src="https://i.loli.net/2020/03/13/jS4pKuJR2AU8lOi.png" alt="image-20200313213214155"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;以前在使用Visio绘图时，不会对齐连接点，导致箭头画的很糟糕，一番摸索后搞定了这个问题，&lt;del&gt;以前画的箭头简直不能看&lt;/del&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Typora+PicGo-core+SMMS图床踩坑记</title>
    <link href="https://proudrabbit.gitee.io/Typora-PicGo-core-SMMS%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91%E8%AE%B0.html"/>
    <id>https://proudrabbit.gitee.io/Typora-PicGo-core-SMMS%E5%9B%BE%E5%BA%8A%E8%B8%A9%E5%9D%91%E8%AE%B0.html</id>
    <published>2020-03-10T02:40:22.000Z</published>
    <updated>2020-04-06T23:36:09.128Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><p>最近把Typora更新后发现，Typora支持PicGo图床工具了。然后赶紧尝鲜，结果踩了不少坑。经过一番百度后发现博主[^<strong>LzSkyline</strong>]已经解决了，遂按照他的方法解决，但还是踩了坑。于是写了这篇随笔。<strong>PicGo-Core已经解决SMMS V1 API不能上传的问题，直接点击下载或更新，更新下PicGo-Core就行了。</strong></p><a id="more"></a><hr><h1 id="一、安装PicGo-Core"><a href="#一、安装PicGo-Core" class="headerlink" title="一、安装PicGo-Core"></a>一、安装PicGo-Core</h1><p>打开Typora，进入偏好设置，选择图像，上传服务，选择PicGo-Core，然后安装，安装完成后点击验证图片上传选项。</p><p><img src="https://i.loli.net/2020/03/10/bM1r2gzNpZPCILi.png" alt="image-20200310104640653"></p><h1 id="二、安装smms-v2-API插件"><a href="#二、安装smms-v2-API插件" class="headerlink" title="二、安装smms v2 API插件"></a>二、安装smms v2 API插件</h1><p><strong>此乃坑一:SMMS V1 API停用</strong></p><p>正如博主<strong>Lzskyline</strong>所说这是个大坑，有多大呢。PicGo-Core目前使用的是SMMS v1 API，但是SMMS已经把V1 API给停了，只能使用V2。（<em>PicGo-Core作者已经在Github上表示后面会增加v2 API</em>）经过查询后发现有其他开发者通过第三方插件的方式解决了这个问题, 所以我们需要安装这个v2版本的smms-user插件.<br>根据验证时的地址找到PicGo-Core的程序目录<br><img src="https://i.loli.net/2020/03/10/soWZrdVcDKNCft1.png" alt="image-20200310105913161"><br><strong>因为API不可用，这里肯定会失败，不用管他</strong></p><p>然后我们进入pico的根目录，在命令行中输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\picgo.exe install smms-user</span><br></pre></td></tr></table></figure><p>等待安装完成即可。</p><hr><p><strong>坑二：Windows下使用Git Bash不能安装，需要使用 CMD</strong></p><p>打开CMD，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CD C:\Users\你自己的用户名\AppData\Roaming\Typora\picgo\win64</span><br></pre></td></tr></table></figure><p>进入picgo的根目录，然后再输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\picgo.exe install smms-user</span><br></pre></td></tr></table></figure><h1 id="三、配置PicGo-Core"><a href="#三、配置PicGo-Core" class="headerlink" title="三、配置PicGo-Core"></a>三、配置PicGo-Core</h1><p>安装完成后，点击第一张图中的打开配置文件，替换为博主<strong>Lzskyline</strong>给的代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"picBed"</span>: &#123;</span><br><span class="line">    <span class="string">"current"</span>: <span class="string">"smms-user"</span>,</span><br><span class="line">    <span class="string">"uploader"</span>: <span class="string">"smms-user"</span>,</span><br><span class="line">    <span class="string">"smms-user"</span>: &#123;</span><br><span class="line">      <span class="string">"Authorization"</span>: <span class="string">"这里替换成你自己的SMMS token"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"transformer"</span>: <span class="string">"path"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"picgoPlugins"</span>: &#123;</span><br><span class="line">    <span class="string">"picgo-plugin-smms-user"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有Authorization的自己去这里申请一个: <a href="https://sm.ms/home/apitoken" target="_blank" rel="noopener">SMMS</a></p><h1 id="四、最终效果"><a href="#四、最终效果" class="headerlink" title="四、最终效果"></a>四、最终效果</h1><p>我们在图片上右击，上传图片，上传完成后，图片的url会自动更换，很是方便。妈妈再也不用担心我不会插图了。<strong>也可以在Typora中配置插入图片自动上传。</strong><br><img src="https://i.loli.net/2020/03/10/vIBqtJfCD5kyrGd.png" alt="image-20200310111959215"></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>虽然踩坑不少, 但毕竟这个功能也是新出的, 相信之后会越来越完善，使用越来越方便。</p><p>最后，感谢<strong>LzSkyline</strong>博主提供的教程。</p><p>[^<strong>LzSkyline</strong>]: 该博主地址 <a href="https://www.lzskyline.com/archives/87/" target="_blank" rel="noopener">https://www.lzskyline.com/archives/87/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;最近把Typora更新后发现，Typora支持PicGo图床工具了。然后赶紧尝鲜，结果踩了不少坑。经过一番百度后发现博主[^&lt;strong&gt;LzSkyline&lt;/strong&gt;]已经解决了，遂按照他的方法解决，但还是踩了坑。于是写了这篇随笔。&lt;strong&gt;PicGo-Core已经解决SMMS V1 API不能上传的问题，直接点击下载或更新，更新下PicGo-Core就行了。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Typora" scheme="https://proudrabbit.gitee.io/tags/Typora/"/>
    
      <category term="Bug" scheme="https://proudrabbit.gitee.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Git学习（三）</title>
    <link href="https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89.html</id>
    <published>2020-03-09T04:17:37.000Z</published>
    <updated>2020-03-14T09:05:47.085Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="指令篇"><a href="#指令篇" class="headerlink" title="指令篇"></a>指令篇</h1><p>​ 以下是我自己整理的常用Git命令。分为本地操作命令，远程仓库相关命令，分支操作命令，保护现场操作命令。</p><a id="more"></a><h1 id="一、本地操作命令"><a href="#一、本地操作命令" class="headerlink" title="一、本地操作命令"></a>一、本地操作命令</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">//把当前的目录变成可以管理的git仓库，生成隐藏.git文件</span></span><br><span class="line"></span><br><span class="line">git add XX  <span class="comment">//把xx文件添加到暂存区去。</span></span><br><span class="line"></span><br><span class="line">git commit –m “XX”  <span class="comment">//提交文件 –m 后面的是注释。</span></span><br><span class="line">    </span><br><span class="line">git commit --amend -m <span class="string">"XX"</span><span class="comment">//更正最近的一次提交</span></span><br><span class="line">    </span><br><span class="line">git status   <span class="comment">//查看仓库状态</span></span><br><span class="line"></span><br><span class="line">git diff  XX     <span class="comment">//查看XX文件修改了那些内容</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>        <span class="comment">//查看历史记录</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^  <span class="comment">//或者 git reset  –hard HEAD~数字 回退到上几个版本，不写数字默认为一。</span></span><br><span class="line"></span><br><span class="line">git reset --hard 版本ID   <span class="comment">//版本号为使用git log查询到的黄色字符串</span></span><br><span class="line"></span><br><span class="line">git reflog      <span class="comment">//查看历史记录的版本号id</span></span><br><span class="line"></span><br><span class="line">git checkout -- XX  <span class="comment">//把XX文件在工作区的修改全部撤销。</span></span><br><span class="line"></span><br><span class="line">git rm XX         <span class="comment">//删除XX文件,知识删除工作目录和暂存区的文件，也就是取消跟踪</span></span><br><span class="line"></span><br><span class="line">git rm --f XX<span class="comment">//删除XX文件的跟踪，并且删除本地文件，不写文件名默认删除所有文件</span></span><br><span class="line">    </span><br><span class="line">git rm --cached XX<span class="comment">//删除XX的跟踪，并保留在本地。--cached指的是暂存区，不写文件名为丢弃所有文件</span></span><br><span class="line"></span><br><span class="line">git mv 旧文件名 新文件名      <span class="comment">//重命名文件</span></span><br></pre></td></tr></table></figure><hr><h1 id="二、远程仓库相关指令"><a href="#二、远程仓库相关指令" class="headerlink" title="二、远程仓库相关指令"></a>二、远程仓库相关指令</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 线上仓库地址<span class="comment">//关联一个远程库 origin可以修改为github或gitee</span></span><br><span class="line">    </span><br><span class="line">git push –u origin master <span class="comment">//把当前master分支推送到远程库(第一次要用-u)</span></span><br><span class="line"></span><br><span class="line">git push origin XX <span class="comment">//Git会把XX分支推送到远程库对应的远程分支上</span></span><br><span class="line">    </span><br><span class="line">git clone 线上仓库地址<span class="comment">//从远程库中克隆</span></span><br><span class="line">    </span><br><span class="line">git remote <span class="comment">//查看远程库的信息</span></span><br><span class="line">    </span><br><span class="line">git remote rm origin<span class="comment">//删除已关联的名为origin的远程库</span></span><br><span class="line">    </span><br><span class="line">git remote –v <span class="comment">//查看远程库的详细信息</span></span><br><span class="line">    </span><br><span class="line">git pull<span class="comment">//拉取远程仓库</span></span><br><span class="line">    </span><br><span class="line">git checkout –b dev  origin/dev<span class="comment">//创建dev分支并切换到dev分支上，同时关联远程Dev分支</span></span><br></pre></td></tr></table></figure><p>==<u>PS:当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支,需要使用<code>git checkout –b dev origin/dev</code> 指令创建远程origin的Dev分支到本地。</u>==</p><hr><h1 id="三、分支操作命令"><a href="#三、分支操作命令" class="headerlink" title="三、分支操作命令"></a>三、分支操作命令</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git branch name  <span class="comment">//创建分支</span></span><br><span class="line">    </span><br><span class="line">git checkout –b dev  <span class="comment">//创建dev分支 并切换到dev分支上。git checkout –b dev origin/dev同时关联远程Dev分支</span></span><br><span class="line">    </span><br><span class="line">git branch  <span class="comment">//查看当前所有的分支</span></span><br><span class="line">    </span><br><span class="line">git checkout master <span class="comment">//切换回master分支 使用switch也行</span></span><br><span class="line">    </span><br><span class="line">git merge dev    <span class="comment">//在当前的分支上合并dev分支</span></span><br><span class="line">    </span><br><span class="line">git merge --no-ff -m <span class="string">"XX"</span> dev<span class="comment">//不使用Fast forward模式合并，合并后被合并(dev)分支依旧保留</span></span><br><span class="line">    </span><br><span class="line">git branch –d dev <span class="comment">//删除dev分支</span></span><br><span class="line">    </span><br><span class="line">git cherry-pick 版本ID   <span class="comment">//复制一个特定的提交到当前分支（常用来修复BUG）</span></span><br></pre></td></tr></table></figure><h1 id="四、现场保护相关命令"><a href="#四、现场保护相关命令" class="headerlink" title="四、现场保护相关命令"></a>四、现场保护相关命令</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment">//把当前的工作隐藏起来 等以后恢复现场后继续工作</span></span><br><span class="line">    </span><br><span class="line">git stash <span class="built_in">list</span> <span class="comment">//查看所有被隐藏的文件列表</span></span><br><span class="line">    </span><br><span class="line">git stash apply <span class="comment">//恢复被隐藏的文件，但是stash内的内容不删除</span></span><br><span class="line">    </span><br><span class="line">git stash drop <span class="comment">//删除stash内的文件</span></span><br><span class="line">    </span><br><span class="line">git stash pop <span class="comment">//恢复文件的同时 stash的内容删除</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;指令篇&quot;&gt;&lt;a href=&quot;#指令篇&quot; class=&quot;headerlink&quot; title=&quot;指令篇&quot;&gt;&lt;/a&gt;指令篇&lt;/h1&gt;&lt;p&gt;​ 以下是我自己整理的常用Git命令。分为本地操作命令，远程仓库相关命令，分支操作命令，保护现场操作命令。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://proudrabbit.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习（二）</title>
    <link href="https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89.html</id>
    <published>2020-03-09T02:47:48.000Z</published>
    <updated>2020-07-03T05:38:28.447Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="提高篇"><a href="#提高篇" class="headerlink" title="提高篇"></a>提高篇</h1><p>​ 这是我自己当初学习的笔记，可能不全，这里推荐廖雪峰的的Git教程，很全面。<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a> 希望对大家有所帮助。</p><a id="more"></a><h2 id="一、分支管理"><a href="#一、分支管理" class="headerlink" title="一、分支管理"></a>一、分支管理</h2><p>​ Git每次提交后都有记录，Git把他们串成时间线，形成类似于时间轴的东西，这个时间轴就是一个分支，我们称之为master分支。在开发是往往是团队合作多人同时开发，如下图所示，因此需要多个分支，保证分支之间互不干扰。</p><p><img src="https://i.loli.net/2020/03/09/ALwzZ3gTjSD9y8x.png" alt="用 户 块  商 品 块  订 单 块  物 流 块 "></p><ol><li>分支相关指令：</li></ol><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>查看分支：</td><td><code>git branch</code></td></tr><tr><td>创建分支：</td><td><code>git branch 分支名</code></td></tr><tr><td>切换分支：</td><td><code>git checkout 分支名</code></td></tr><tr><td>删除分支：</td><td><code>git branch -d 分支名</code></td></tr><tr><td>合并分支：</td><td><code>git merge 被合并的分支名</code></td></tr><tr><td>备注：</td><td>当前分支前有个标记“*”并且会高亮，切换分支指令在切换到不存在分支时会自动创建分支。</td></tr></tbody></table><ol start="2"><li>查看、创建、切换分支操作</li></ol><p><img src="https://i.loli.net/2020/03/09/nyj2gwrGs98bmMK.png" alt="未命名图片"></p><ol start="3"><li><p>合并分支</p><p>先在Dev分支下修改readme文件，并提交本地。然后切换到master分支，这时发现刚才在Dev分支下readme.txt修改的内容不存在了。此时需要将Dev分支与master分支的内容合并，此时在master分支下已经可以看到Dev修改的内容了。</p></li></ol><p><img src="https://s2.ax1x.com/2020/03/09/8STujg.png" alt="8STujg.png"></p><p>此时Dev分支已经没有用了，可以选择删除了。</p><p>==注意：在删除分支时，一定要先退出要删除的分支，然后才能删除。==</p><p>执行<code>git push</code>将仓库内容提交线上。</p><h2 id="二、冲突的产生与解决"><a href="#二、冲突的产生与解决" class="headerlink" title="二、冲突的产生与解决"></a>二、冲突的产生与解决</h2><h3 id="1-模拟产生冲突"><a href="#1-模拟产生冲突" class="headerlink" title="1. 模拟产生冲突"></a>1. 模拟产生冲突</h3><ol><li><p>同事下班后修改了线上仓库代码。</p><p><img src="https://i.loli.net/2020/03/09/wargxJ47pVfvkWF.png" alt="未命名图片3.png"></p></li><li><p>第二天我没有拉取线上内容，直接修改了本地仓库的内容，然后提交了线上仓库。此时提示错误，并且线上仓库并没有改变。</p><p><img src="https://s2.ax1x.com/2020/03/09/8STDER.png" alt="8STDER.png"></p></li></ol><h3 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2.解决冲突"></a>2.解决冲突</h3><ol><li><p>git提示我们需要在在此push前先执行<code>git pull</code>操作。</p></li><li><p><code>git pull</code> 提示我们已经将本地与线上仓库的冲突合并到了readme.txt文件</p><p><img src="https://i.loli.net/2020/03/09/crT8Ko2Vu5OvzgP.png" alt="未命名图片5"></p></li><li><p>打开冲突文件，解决冲突</p><p><img src="https://i.loli.net/2020/03/09/kYmhcUqNFJ12DZI.png" alt="未命名图片6"></p></li></ol><p>==解决方法：需要和同时（谁之前提交的）进行商量，看代码如何保留，将改好的代码重新提交即可。==</p><h2 id="三、图形管理工具"><a href="#三、图形管理工具" class="headerlink" title="三、图形管理工具"></a>三、图形管理工具</h2><ol><li><p>GitHub for Desktop</p><p>老牌的Git GUI管理工具，功能丰富，基本操作和高级操作都非常流畅，适合初学者。</p></li><li><p>TortoiseGit</p><p>简称tgit，中文海龟Git，适合熟悉SVN的开发人员.</p></li></ol><h2 id="四、忽略文件"><a href="#四、忽略文件" class="headerlink" title="四、忽略文件"></a>四、忽略文件</h2><p>​ 项目中可能会有很多万年不变的文件目录，例如css、images等，或者有修改但是不想提交到远程仓库的文档，此时我们可以使用“忽略文件”机制来实现。</p><p>​ 忽略文件需要新建一个名为.gitignore的文件，该文件用于申明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。</p><p>==注意：该文件因为没有文件名，没发直接在windows目录下直接创建，可是通过命令行git bash来touch创建。==</p><ol><li>常见规则写法<table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>mtk/</td><td>过滤整个文件夹</td></tr><tr><td>*.zip</td><td>过滤所有.zip文件</td></tr><tr><td>mtk/文件名.后缀名</td><td>过滤某个具体文件</td></tr><tr><td>!文件名.后缀名</td><td>不过滤具体某个文件，!表示不过滤某个具体文件</td></tr><tr><td>!mtk/文件名.后缀名</td><td>不过滤某个文件夹下的具体文件</td></tr><tr><td>备注</td><td>在文件以#开头的都是注释</td></tr></tbody></table></li></ol><p>==注意：.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。==</p><ol start="2"><li>先在本地仓库中新建一个js目录以及目录中js文件</li><li>依次提交本地与线上</li><li>新增.gitignore文件 指令：<code>touch .gitignore</code></li></ol><p><img src="https://i.loli.net/2020/03/09/ewLz8Ygs19rT2Wc.png" alt="未命名图片7"></p><ol start="5"><li>编写规则（根据需要编写）</li></ol><p><img src="https://i.loli.net/2020/03/09/Yk9hFtnxy7Le5Rm.png" alt="未命名图片8"></p><ol start="6"><li>添加pass.txt文件后再次提交线上仓库，发现线上并没有pass.txt文件，说明规则已经生效。</li></ol><p><img src="https://i.loli.net/2020/03/09/s1WBJdehCIo7q5K.png" alt="未命名图片9"></p><p><img src="https://i.loli.net/2020/03/09/qOacJKrxun8bUz2.png" alt="未命名图片10"></p><p><img src="https://i.loli.net/2020/03/09/PBVzGkwEDdLZrRN.png" alt="未命名图片11"></p><h2 id="五、同时提交到Github和Gitee仓库"><a href="#五、同时提交到Github和Gitee仓库" class="headerlink" title="五、同时提交到Github和Gitee仓库"></a>五、同时提交到Github和Gitee仓库</h2><ol><li><p>注册Gitee账号，<strong><u>==注意邮箱要和Github注册所使用的邮箱一致。==</u></strong></p></li><li><p>添加SSH公钥到Gitee，ssh在 <a href="https://proudrabbit.gitee.io/2020/03/08/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/">Git学习（一）</a> 六、远程仓库，基于SSH篇章提到怎么使用。</p><p><img src="https://i.loli.net/2020/03/09/8PmMBHTJNc9CioU.jpg" alt="捕获"></p></li><li><p>输入<code>ssh -T git@gitee.com</code>验证。第一次验证会让你确实是否是你本人操作，输入yes即可。</p><p><img src="https://i.loli.net/2020/03/09/Y7HDpK2GPuThJie.jpg" alt="捕获1"></p></li><li><p>输入<code>git remote rm origin</code>删除已关联的名为origin的远程库。</p></li><li><p>输入<code>git remote add github 线上仓库地址</code>关联github上的远程仓库</p></li><li><p>输入<code>git remote add gitee 线上仓库地址</code> 关联gitee上的远程仓库</p></li><li><p>输入<code>git remoter -v</code>查看本地仓库关联的远程仓库</p></li></ol><p><img src="https://i.loli.net/2020/03/09/m8VlEor3wWeD7qI.jpg" alt="捕获2"></p><ol start="8"><li>输入<code>git push github 分支名</code>和<code>git push gitee 分支名</code>分别推送到对应仓库上的对应分支上。至此完成了本地仓库同步推送到Github和Gitee上的远程仓库。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;提高篇&quot;&gt;&lt;a href=&quot;#提高篇&quot; class=&quot;headerlink&quot; title=&quot;提高篇&quot;&gt;&lt;/a&gt;提高篇&lt;/h1&gt;&lt;p&gt;​ 这是我自己当初学习的笔记，可能不全，这里推荐廖雪峰的的Git教程，很全面。&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的Git教程&lt;/a&gt; 希望对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://proudrabbit.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习（一）</title>
    <link href="https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89.html</id>
    <published>2020-03-08T06:53:25.000Z</published>
    <updated>2020-07-02T04:09:14.065Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p>这已经是重写第二遍了，原因没做好Git的项目跟踪，然后VScode误操作，删了。。。。😭😭，还是typora好用，不敢用VScode了。。。。</p><h2 id="需要工具"><a href="#需要工具" class="headerlink" title="需要工具"></a>需要工具</h2><pre><code>* Git安装包：地址：https://git-scm.com/* Github网站账号 地址：https://github.com/</code></pre><hr><a id="more"></a><h2 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h2><p>​ 百度搜索Git下载安装直接默认即可。然后进入Github注册账号。</p><p>​ Git相关知识主要分为三个区，工作区，暂存区以及Git仓库</p><h2 id="二、进行全局配置"><a href="#二、进行全局配置" class="headerlink" title="二、进行全局配置"></a>二、进行全局配置</h2><p>​ 右键在空白处右键，点击”Git bash here“打开Git命令行窗口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">config</span> --global user.name“用户名”<span class="comment">//绑定用户，使用GitHub注册的用户名。</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">config</span> --global user.email“ 邮箱” <span class="comment">//绑定邮箱，同样使用GitHub注册用的邮箱。</span></span><br></pre></td></tr></table></figure><p>注意不要输错</p><h2 id="三、创建本地仓库"><a href="#三、创建本地仓库" class="headerlink" title="三、创建本地仓库"></a>三、创建本地仓库</h2><p>==不建议在现有项目上学习Git，防止出现无法恢复的误操作。不要使用中文路径名。==</p><ol><li><p><code>mkdir study_git</code> //创建文件夹（项目）</p></li><li><p><code>cd study_git</code> //进入项目目录</p></li><li><p>Git仓库初始化（让Git知道他需要管理这个项目目录 <code>git init</code> 文件夹会添加一个隐藏的文件夹，不能删除也不能随意更改其中的内容。</p></li><li><p>仓库常用操作指令</p></li><li><ol><li>查看当前状态： <code>git status</code></li><li>添加到缓存区： <code>git add 文件名</code> //说明git add指令可以添加一个文件，也可以添加多个文件。</li></ol></li></ol><table><thead><tr><th>语法</th><th>命令格式</th></tr></thead><tbody><tr><td>语法1：</td><td>git add 文件名</td></tr><tr><td>语法2：</td><td>git add 文件名1 文件名2 文件名3……</td></tr><tr><td>语法3：</td><td>git add . //【添加当前目录下所有文件到缓存区】</td></tr></tbody></table><ol start="6"><li>提交至版本库： <code>git commit -m “注释内容”</code></li></ol><p>后续进行修改文件操作后，重复使用<code>git add</code>和<code>git commit</code>指令即可。</p><p><img src="https://i.loli.net/2020/03/08/9VXrUPDZAwSCjYm.png" alt="clip_image001"></p><h2 id="四、版本回退"><a href="#四、版本回退" class="headerlink" title="四、版本回退"></a>四、版本回退</h2><p>版本回退分为两步进行操作</p><p>查看版本，确定需要回到的时刻点；指令：<code>git log</code> 和<code>git log --pretty = oneline</code> //推荐使用第二个</p><ol><li><p>回退操作，指令：<code>git reset --hard 版本号</code></p></li><li><p>黄色的字符串为某一个时间点提交的序号（版本号）,（HEAD-&gt;master）表示当前所在的位置。回到过去后再想回到最新的版本，则需要指令查看历史操作，以得到最新的commit id 指令 <code>git reflog</code></p></li></ol><p><img src="https://i.loli.net/2020/03/08/jHOBoGuVXd1wyb9.png" alt="clip_image002"></p><p>==<u>小结：要想进行版本回退，需要得到commit id，然后进行回退；要想回到未来，需要使用<code>git reflog</code>进行历史查看，得到最新的commit id；版本回退时commit id可以不用写全，git自动识别，至少写四位。</u>==</p><h2 id="六、远程仓库"><a href="#六、远程仓库" class="headerlink" title="六、远程仓库"></a>六、远程仓库</h2><p>推荐使用GitHub提供的服务,后面会使用Git同步推送到Github和Gitee(国内码云)，推荐使用SSH公私钥对的方式</p><h3 id="1-基于HTTP协议"><a href="#1-基于HTTP协议" class="headerlink" title="1. 基于HTTP协议"></a>1. 基于HTTP协议</h3><p>​ 1. 创建空目录，名称为GitHub上创建的仓库名。<img src="https://i.loli.net/2020/03/08/ZN2lCGmeq9Kkdah.png" alt="clip_image003"></p><p>​ 2. 使用 clone 指令克隆线上仓库到本地。指令：<code>git clone 线上仓库地址</code></p><p>​ <img src="https://i.loli.net/2020/03/08/LiUvyBMHqmIoEPf.png" alt="clip_image004"></p><p>​ 3. 在仓库上做对应操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库）</p><p>​ 4. 提交线上仓库的指令：<code>git push</code> //如果第一次提交显示错误403表示没有权限，需要修改“.git/config”文件内容</p><p>​ 将</p><p>​ <code>[remote&quot;origin&quot;]url = https://github.com/用户名/仓库名.git</code></p><p>​ 修改为</p><p>​ <code>[remote&quot;origin&quot;]url=https://用户名:密码@github.com/用户名/仓库名.git</code></p><p>​ 提交成功后，可以查看线上仓库的内容，需要刷新。</p><p><img src="https://i.loli.net/2020/03/08/Ml7yrNHXZR4cWQJ.png" alt="clip_image005"></p><p>​ 5 拉取线上仓库指令：<code>git pull</code></p><p>​ 首先在线上创建文件</p><p><img src="https://i.loli.net/2020/03/08/2ZbHRjinu7wN9Xm.png" alt="clip_image006"></p><p><img src="https://i.loli.net/2020/03/08/nXWsqceMBmHw1tR.png" alt="clip_image007"></p><p>​ 然后输入指令：<code>git pull</code></p><p><img src="https://i.loli.net/2020/03/08/nsDFpY3OHrh1SJc.png" alt="clip_image008"></p><p>==注意：每天上班前拉取线上最新版本（<code>git pull</code>），下班前推送版本（<code>git push</code>）将本地代码提交的线上仓库。==</p><h3 id="2-基于SSH协议（推荐）"><a href="#2-基于SSH协议（推荐）" class="headerlink" title="2. 基于SSH协议（推荐）"></a>2. 基于SSH协议（推荐）</h3><p>该方式与前面HTTP方式相比，只是影响GitHub对于用户的身份鉴权方式，对于git的具体操作（如提交本地，添加注释等）没有任何影响。</p><p>步骤：</p><p>​ ①生成客户端公私钥对文件（文件默认在C盘用户Admin的.ssh文件夹内）；</p><p>​ ②将公钥上传到GitHub</p><p>​ 2.1 生成公私钥对指令（需先自行安装OpenSSH）：<code>ssh-keygen -t rsa -C &quot;注册邮箱&quot;</code></p><p>​ 2.2 将公钥文件内容上传GitHub（id_rsa.pub）</p><p>​ 2.3 验证公钥<code>ssh -T git@github.com</code> （@后网址可以修改）</p><p><img src="https://i.loli.net/2020/03/08/YJgw8u9xIWRnaL6.png" alt="clip_image009"></p><p><img src="https://i.loli.net/2020/03/08/CygzQBHtISkq5TO.png" alt="clip_image010"></p><p>​ 标题可以随意填写，填写完之后保存即可。</p><p>​ 2.4 执行后续git操作，操作与之前一样。</p><p>​ 例如克隆线上仓库到本地</p><p>​ <code>Git clone git@github.com:ProudRabbit/STM32F4_FreeRTOS.git //使用SSH地址</code></p><p><img src="https://i.loli.net/2020/03/08/QPmlKxUAEH5Vb6W.png" alt="lip_image011"></p><p>==<u>PS:在使用SSH或者HTTPS协议克隆线上仓库到本地后，不要修改线上仓库的地址（如使用SSH改为使用HTTPS），这样会导致本地无法访问线上仓库。</u>==</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;p&gt;这已经是重写第二遍了，原因没做好Git的项目跟踪，然后VScode误操作，删了。。。。😭😭，还是typora好用，不敢用VScode了。。。。&lt;/p&gt;&lt;h2 id=&quot;需要工具&quot;&gt;&lt;a href=&quot;#需要工具&quot; class=&quot;headerlink&quot; title=&quot;需要工具&quot;&gt;&lt;/a&gt;需要工具&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;* Git安装包：地址：https://git-scm.com/
* Github网站账号 地址：https://github.com/&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://proudrabbit.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://proudrabbit.gitee.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://proudrabbit.gitee.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html</id>
    <published>2020-03-07T05:24:19.000Z</published>
    <updated>2020-03-07T06:15:37.667Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --><p><a href="https://imgchr.com/i/3XKtlF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/07/3XKtlF.jpg" alt="3XKtlF.jpg"></a></p><a id="more"></a><h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>​ 经过两天的折腾，终于把个人博客在Github和Gitee上搭建成功了，现在超开心的说o(<em>￣▽￣</em>)ブ。</p><hr><h2 id="写这篇博客的目的"><a href="#写这篇博客的目的" class="headerlink" title="写这篇博客的目的"></a>写这篇博客的目的</h2><p>​ 因为我有写笔记的习惯，以前笔记都是在OneNote上写的，现在逐渐从Windows下转移到Linux，但是Linux下没有OneNote，以及OneNote同步太慢，遂萌生了搭建个人博客的想法。后面我会把自己搭建博客的经验分享出来。</p><hr><p>感谢yilia-puls主题的博主给予的帮助。</p><p><strong>仅以此博客记录我第一次搭建个人博客。</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 03 2020 13:41:22 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/3XKtlF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/07/3XKtlF.jpg&quot; alt=&quot;3XKtlF.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
