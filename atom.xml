<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兔子的个人博客 - Hexo Blog</title>
  
  <subtitle>非学无以广才，非志无以成学</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://proudrabbit.gitee.io/"/>
  <updated>2020-09-19T14:13:42.917Z</updated>
  <id>https://proudrabbit.gitee.io/</id>
  
  <author>
    <name>路痴的兔子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu修改默认终端</title>
    <link href="https://proudrabbit.gitee.io/Ubuntu%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF.html"/>
    <id>https://proudrabbit.gitee.io/Ubuntu%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF.html</id>
    <published>2020-09-19T13:59:47.000Z</published>
    <updated>2020-09-19T14:13:42.917Z</updated>
    
    <content type="html"><![CDATA[<p>在终端中输入如下命令即可，当然前提是安装了<code>Debian</code>的深度终端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.desktop.default-applications.terminal exec &#x2F;usr&#x2F;bin&#x2F;deepin-terminal  </span><br><span class="line"></span><br><span class="line">gsettings set org.gnome.desktop.default-applications.terminal exec-arg &quot;-x&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在Ubuntu下修改默认终端为Debian终端。
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（六）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html</id>
    <published>2020-09-19T13:55:47.000Z</published>
    <updated>2020-09-19T13:58:45.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><p><strong>正常工作中进行驱动开发的方式——子系统。</strong></p><h2 id="一、pinctrl子系统"><a href="#一、pinctrl子系统" class="headerlink" title="一、pinctrl子系统"></a>一、pinctrl子系统</h2><p>​ 借助<code>pinctrl</code>来设置一个<code>pin</code>的复用和电气属性。</p><p>​ <code>pinctrl</code> 子系统主要工作内容如下：</p><ol><li>获取设备树中的<code>pin</code>信息。</li><li>根据获取到的<code>pin</code>信息来设置<code>pin</code>的复用功能。</li><li>根据获取到的<code>pin</code>信息来设置<code>pin</code>的电气特性，比如上/下拉、速度、驱动能力等。</li></ol><a id="more"></a><p>对于使用者来说，只要在设备树里面设置某个<code>pin</code>的相关属性即可，其他的初始化工作由<code>pinctrl</code>子系统来完成，<code>pinctrl</code>子系统源码目录为<code>drivers/pinctrl</code>。根据设备的类型，会创建对应的子节点，然后设备所用<code>pin</code>都放到此节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">imx6ul-evk &#123;</span><br><span class="line">pinctrl_hog_1: hoggrp-1 &#123;</span><br><span class="line">fsl,pins &#x3D; &lt;</span><br><span class="line">MX6UL_PAD_UART1_RTS_B__GPIO1_IO190x17059 &#x2F;* SD1 CD *&#x2F;</span><br><span class="line">MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT0x17059 &#x2F;* SD1 VSELECT *&#x2F;</span><br><span class="line">MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        0x17059 &#x2F;* SD1 RESET *&#x2F;</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、gpio子系统"><a href="#二、gpio子系统" class="headerlink" title="二、gpio子系统"></a>二、gpio子系统</h2><p>​ 使用<code>gpio</code>子系统来使用<code>gpio</code>。</p><h2 id="三、驱动编写"><a href="#三、驱动编写" class="headerlink" title="三、驱动编写"></a>三、驱动编写</h2><ol><li>设备树修改</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/ &#123;</span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">  gpioled &#123;</span><br><span class="line">compatible = <span class="string">"atkalpha,gpioled"</span>;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_gpioled&gt;;</span><br><span class="line">led-gpios = &lt;&amp;gpio1 <span class="number">3</span> GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&amp;iomuxc &#123;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_hog_1&gt;;</span><br><span class="line">imx6ul-evk &#123;</span><br><span class="line">pinctrl_hog_1: hoggrp<span class="number">-1</span> &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6UL_PAD_UART1_RTS_B__GPIO1_IO19<span class="number">0x17059</span> <span class="comment">/* SD1 CD */</span></span><br><span class="line">MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT<span class="number">0x17059</span> <span class="comment">/* SD1 VSELECT */</span></span><br><span class="line">MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        <span class="number">0x17059</span> <span class="comment">/* SD1 RESET */</span></span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自己定义的led */</span></span><br><span class="line">pinctrl_gpioled: ledgrp &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6UL_PAD_GPIO1_IO03__GPIO1_IO03<span class="number">0X10B0</span></span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">        ......</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&amp;tsc &#123;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_tsc&gt;;</span><br><span class="line">xnur-gpio = &lt;&amp;gpio1 <span class="number">3</span> GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">measure-<span class="built_in">delay</span>-time = &lt;<span class="number">0xffff</span>&gt;;</span><br><span class="line">pre-charge-time = &lt;<span class="number">0xfff</span>&gt;;</span><br><span class="line">status = <span class="string">"disable"</span>;<span class="comment">// 因为和LED灯使用引脚冲突，所以需要关闭</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>驱动程序</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ide.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_address.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_irq.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOLED_CNT1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOLED_NAME<span class="meta-string">"gpioled"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDOFF0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDON 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpioled_dev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">dev_t</span> devid;</span><br><span class="line"><span class="keyword">int</span> major;</span><br><span class="line"><span class="keyword">int</span> minor;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class</span> *<span class="title">class</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">device</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">nd</span>;</span></span><br><span class="line"><span class="keyword">int</span> led_gpio;<span class="comment">/* led 所使用的 GPIO 编号 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpioled_dev</span> <span class="title">gpioled</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">led_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">filp-&gt;private_data = &amp;gpioled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">led_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpioled_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">led_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpioled_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = copy_from_user(databuff, buf, count);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"kernel write failed!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(databuff[<span class="number">0</span>] == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">gpio_set_value(dev-&gt;led_gpio, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">gpio_set_value(dev-&gt;led_gpio, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">led_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">open</span> = led_open,</span><br><span class="line">.<span class="built_in">release</span> = led_release,</span><br><span class="line">.<span class="built_in">write</span> = led_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 入口和出口 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册字符设备驱动 */</span></span><br><span class="line">gpioled.major = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(gpioled.major)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 给定设备号 */</span></span><br><span class="line">gpioled.devid = MKDEV(gpioled.major, <span class="number">0</span>);</span><br><span class="line">ret = register_chrdev_region(gpioled.devid, GPIOLED_CNT, GPIOLED_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">alloc_chrdev_region(&amp;gpioled.devid, <span class="number">0</span>,GPIOLED_CNT,GPIOLED_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_devid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化cdev */</span></span><br><span class="line">gpioled.cdev.owner = THIS_MODULE;</span><br><span class="line">cdev_init(&amp;gpioled.cdev, &amp;led_fops);</span><br><span class="line">ret = cdev_add(&amp;gpioled.cdev, gpioled.devid, GPIOLED_CNT);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建类 */</span></span><br><span class="line">gpioled<span class="class">.<span class="keyword">class</span> = <span class="title">class_create</span>(<span class="title">THIS_MODULE</span>, <span class="title">GPIOLED_NAME</span>);</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(gpioled.class))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(gpioled.class);</span><br><span class="line"><span class="keyword">goto</span> fail_class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gpioled.device = device_create(gpioled.class, <span class="literal">NULL</span>, gpioled.devid, <span class="literal">NULL</span>, GPIOLED_NAME);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(gpioled.device))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(gpioled.device);</span><br><span class="line"><span class="keyword">goto</span> fail_device;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取设备节点 */</span></span><br><span class="line">gpioled.nd = of_find_node_by_path(<span class="string">"/gpioled"</span>);</span><br><span class="line"><span class="keyword">if</span> (gpioled.nd == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_findnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取LED对应的GPIO */</span></span><br><span class="line">gpioled.led_gpio = of_get_named_gpio(gpioled.nd, <span class="string">"led-gpios"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (gpioled.led_gpio &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_findnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 申请IO */</span></span><br><span class="line">ret = gpio_request(gpioled.led_gpio, <span class="string">"led_gpio"</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"failed to request the led\r\n"</span>);</span><br><span class="line"><span class="comment">/* <span class="doctag">NOTE:</span>申请失败的话，大部分原因这个IO被别的外设占用</span></span><br><span class="line"><span class="comment"> * 需要在设备树中屏蔽相关代码，或者status属性值设置为disable</span></span><br><span class="line"><span class="comment"> * 检查复用，也就是pinctl</span></span><br><span class="line"><span class="comment"> * gpio使用 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">goto</span> fail_findnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用IO 设置为输出 默认为低电平*/</span></span><br><span class="line">ret = gpio_direction_output(gpioled.led_gpio, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_setoutput;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail_setoutput:</span><br><span class="line">gpio_free(gpioled.led_gpio);</span><br><span class="line">fail_findnd:</span><br><span class="line">device_destroy(gpioled.class, gpioled.devid);</span><br><span class="line">fail_device:</span><br><span class="line">class_destroy(gpioled.class);</span><br><span class="line">fail_class:</span><br><span class="line">cdev_del(&amp;gpioled.cdev);</span><br><span class="line">fail_cdev:</span><br><span class="line">unregister_chrdev_region(gpioled.devid, GPIOLED_CNT);</span><br><span class="line">fail_devid:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">led_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 释放IO */</span></span><br><span class="line">gpio_free(gpioled.led_gpio);</span><br><span class="line">device_destroy(gpioled.class, gpioled.devid);</span><br><span class="line">class_destroy(gpioled.class);</span><br><span class="line">cdev_del(&amp;gpioled.cdev);</span><br><span class="line">unregister_chrdev_region(gpioled.devid,GPIOLED_CNT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册驱动和卸载驱动 */</span></span><br><span class="line">module_init(led_init);</span><br><span class="line">module_exit(led_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"fengyuhang"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（五）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html</id>
    <published>2020-09-19T13:51:40.000Z</published>
    <updated>2020-09-19T13:55:25.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="一、什么是设备树"><a href="#一、什么是设备树" class="headerlink" title="一、什么是设备树"></a>一、什么是设备树</h2><ol><li>设备树：设备和树。</li><li>描述设备树的文件叫做<code>DTS</code>(Device Tree Source)，这个 <code>DTS</code> 文件采用树形结构描述本板级设备，也就是开发板上的设备信息。比如CPU数量、内存基地址、<code>IIC</code> 接口上外接了哪些设备等等。</li><li>由于以前板级信息都是写到 <code>.c</code> 文件里面，导致 <code>linux</code> 内核臃肿。因此将板级信息做成独立的格式，文件扩展名为 <code>.dts</code> 。一个平台或者机器对应一个 <code>.dts</code> 。</li></ol><a id="more"></a><h2 id="二、DTS、DTB和DTC的关系"><a href="#二、DTS、DTB和DTC的关系" class="headerlink" title="二、DTS、DTB和DTC的关系"></a>二、DTS、DTB和DTC的关系</h2><p>​ <code>.dts</code> 相当于 <code>.c</code> ，就是DTS源码文件。<code>DTC</code> 工具相当于 <code>gcc</code> 编译器，将 <code>.dts</code> 编译成 <code>.dtb</code> 。<code>dtb</code> 相当于 <code>bin</code> 文件或可执行文件。</p><p>​ 通过 <code>make dtbs</code> 命令来编译所有的 <code>.dts</code> 文件，通过 <code>make xxxxx.dtb</code> 来编译对应的 <code>.dts</code> 文件，需要在 <code>makefile</code> 中添加 <code>.dts</code> 文件所在路径。编译 <code>dts</code> 文件的 <code>Makefile</code> 在 <code>arch/arm/boot/dts</code> 下。</p><h2 id="三、DTS基本语法"><a href="#三、DTS基本语法" class="headerlink" title="三、DTS基本语法"></a>三、DTS基本语法</h2><p>​ 这篇<a href="https://blog.csdn.net/u014717231/article/details/53139968" target="_blank" rel="noopener">DTS入门知识</a>博客对<code>DTS</code>进行了入门的讲解。</p><ol><li><p>DTS是 <code>/</code> 开始。</p></li><li><p>从 <code>/</code> 根节点开始描述设备信息。</p></li><li><p>在 <code>/</code> 根节点外有一些 <code>&amp;cpu0</code> 的语句是”追加“。</p></li><li><p>节点名字的要求</p><p><code>label: node-name@unit-address</code> 标签: 节点名字@地址。</p><ul><li><code>label</code> ：为了方便的访问节点。</li><li><code>node-name</code> ：可使用的字符 [0<del>9] [a</del>z] [A~Z] [ , . + - _ ]。约定使用小写。</li><li><code>unit-address</code> ：一般是外设寄存器的起始地址。有的是外设的设备地址或者其他含义，需要根据情况来分析。</li></ul></li></ol><h2 id="四、设备树在系统中的体现"><a href="#四、设备树在系统中的体现" class="headerlink" title="四、设备树在系统中的体现"></a>四、设备树在系统中的体现</h2><p>​ 系统启动以后可以在根文件系统里面看到设备树的节点信息。在 <code>/proc/device-tree/</code> <code>-&gt;</code> <code>/sys/firmware/devicetree/base</code> 目录下存放着设备树信息。</p><p>​ 内核启动的时候会解析设备树，然后在 <code>/proc/device-tree/</code>目录下呈现出来。</p><h2 id="五、特殊节点"><a href="#五、特殊节点" class="headerlink" title="五、特殊节点"></a>五、特殊节点</h2><ol><li><code>aliases</code> 节点，对节点进行取别名。</li><li><code>chosen</code> 节点，主要目的就是将 <code>uboot</code> 里面的 <code>bootargs</code> 环境变量值，传递给 <code>linux</code> 内核作为命令行参数 <code>cmd line</code> 。<code>uboot</code> 会将 <code>bootargs</code> 环境变量写入 <code>chosen</code> 节点中，通过 <code>fdt_chosen</code> 函数。</li></ol><h2 id="六、属性"><a href="#六、属性" class="headerlink" title="六、属性"></a>六、属性</h2><table><thead><tr><th>嵌入式不常用或弃用属性</th><th>实例</th><th>作用</th></tr></thead><tbody><tr><td>ranges</td><td>ranges = &lt;child-bus-address,parent-bus-address,length&gt;/<code>ranges;</code></td><td>ranges是一个地址映射/转换表,ranges 属性每个项目由子地址、父地址和地址空间长度这三部分组成:<br><code>child-bus-address</code>:子总线地址空间的物理地址,由父节点的#address-cells 确定此物理地址所占用的字长。<br><code>parent-bus-address</code>:父总线地址空间的物理地址,同样由父节点的#address-cells 确定此物理地址所占用的字长。<br><code>length</code>:子地址空间的长度,由父节点的#size-cells 确定此地址长度所占用的字长。<br>如果 ranges 属性值为空值，说明子地址空间和父地址空间完全相同，不需要进行地址转换。</td></tr><tr><td>name</td><td></td><td>name 属性用于记录节点名字,name 属性已经被弃用,不推荐使用name 属性,一些老的设备树文件可能会使用此属性。</td></tr><tr><td>device_type</td><td>device_type = “cpu”;</td><td>用于描述设备的 FCode,但是设备树没有 FCode,所以此属性也被抛弃了。此属性只能用于 cpu 节点或者 memory 节点。imx6ull.dtsi 的 cpu0 节点用到了此属性</td></tr></tbody></table><hr><table><thead><tr><th>属性</th><th>实例/可选值</th><th>作用</th></tr></thead><tbody><tr><td>compatible</td><td>compatible = “fsl,imx6ul-evk-wm8960”,”fsl,imx-audio-wm8960”;</td><td>设备兼容属性</td></tr><tr><td>mode</td><td>model = “wm8960-audio”;</td><td>描述设备模块信息</td></tr><tr><td>status</td><td><code>okay</code>/<code>disabled</code>/<code>fail</code>/<code>fail-sss</code></td><td>描述设备状态</td></tr><tr><td>#address-cells</td><td>#address-cells = &lt;1&gt;;</td><td>描述了<strong>子节点</strong><code>reg</code>属性中地址信息所占用的字长(32 位)</td></tr><tr><td>#size-cells</td><td>#size-cells = &lt;1&gt;;</td><td>描述了<strong>子节点</strong><code>reg</code>属性中长度信息所占的字长(32 位)</td></tr><tr><td>reg</td><td>reg = &lt;address1 length1 address2 length2……&gt;</td><td>描述设备起始地址和长度</td></tr></tbody></table><h2 id="七、特殊的属性"><a href="#七、特殊的属性" class="headerlink" title="七、特殊的属性"></a>七、特殊的属性</h2><ol><li><p><code>compatible</code>属性，值是字符串。</p><p>根节点<code>/</code>下的<code>compatible</code>属性，内核在启动的时候会检查是否支持此平台，在以前不使用设备树的时候会通过<code>machine id</code>来判断内核是否支持此机器。使用设备数后不再使用机器ID，而是使用根节点<code>/</code>下的<code>compatible</code>属性。</p></li></ol><p>未使用设备树的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MACHINE_START(_type,_name)\</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">machine_desc</span> __<span class="title">mach_desc_</span>##_<span class="title">type</span>\</span></span><br><span class="line"><span class="class">__<span class="title">used</span>\</span></span><br><span class="line"><span class="class">__<span class="title">attribute__</span>((__<span class="title">section__</span>(".<span class="title">arch</span>.<span class="title">info</span>.<span class="title">init</span>"))) = &#123;</span>\</span><br><span class="line">.nr = MACH_TYPE_##_type,\</span><br><span class="line">.name = _name,\</span><br><span class="line">    </span><br><span class="line">#define MACHINE_END\</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用设备树的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DT_MACHINE_START(_name, _namestr)\</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">machine_desc</span> __<span class="title">mach_desc_</span>##_<span class="title">name</span>\</span></span><br><span class="line"><span class="class">__<span class="title">used</span> \</span></span><br><span class="line"><span class="class">__<span class="title">attribute__</span>((__<span class="title">section__</span>(".<span class="title">arch</span>.<span class="title">info</span>.<span class="title">init</span>"))) = &#123;</span> \</span><br><span class="line">.nr = ~<span class="number">0</span>,\</span><br><span class="line">.name = _namestr,\</span><br><span class="line"></span><br><span class="line">#define MACHINE_END\</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="八、Linux内核的OF操作函数"><a href="#八、Linux内核的OF操作函数" class="headerlink" title="八、Linux内核的OF操作函数"></a>八、Linux内核的OF操作函数</h2><ol><li><p>驱动如何获取到设备树中的设备信息。在驱动中使用<code>OF</code>函数获取设备树属性内容。</p><ol start="2"><li><p>驱动要想获取到设备树节点内容，首先要找到节点。</p></li><li><p>查找节点的of函数：</p><ul><li><p><code>of_find_node_by_name</code>函数</p><p>of_find_node_by_name 函数通过节点名字查找指定的节点,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_find_node_by_name</span><span class="params">(struct device_node *from, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>from：开始查找的节点,如果为<code>NULL</code>表示从根节点开始查找整个设备树。<br>name：要查找的节点名字。<br>返回值：找到的节点,如果为<code>NULL</code>表示查找失败。</p></li><li><p><code>of_find_node_by_type</code>函数</p><p>of_find_node_by_type 函数通过<code>device_type</code>属性查找指定的节点,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_find_node_by_type</span><span class="params">(struct device_node *from, <span class="keyword">const</span> <span class="keyword">char</span> *type)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>from：开始查找的节点,如果为 <code>NULL</code> 表示从根节点开始查找整个设备树。<br>type：要查找的节点对应的 <code>type</code> 字符串,也就是<code>device_type</code>属性值。<br>返回值：找到的节点,如果为<code>NULL</code>表示查找失败。</p></li><li><p><code>of_find_compatible_node</code>函数</p><p>of_find_compatible_node 函数根据<code>device_type</code>和<code>compatible</code>这两个属性查找指定的节点,<br>函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_find_compatible_node</span><span class="params">(struct device_node *from,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *type, <span class="keyword">const</span> <span class="keyword">char</span> *compatible)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>from：开始查找的节点,如果为<code>NULL</code>表示从根节点开始查找整个设备树。<br>type：要查找的节点对应的<code>type</code>字符串,也就是<code>device_type</code>属性值,可以为<code>NULL</code>,表示忽略掉<code>device_type</code>属性。<br>compatible：要查找的节点所对应的<code>compatible</code>属性列表。<br>返回值：找到的节点,如果为<code>NULL</code>表示查找失败。</p></li><li><p><code>of_find_matching_node_and_match</code>函数</p><p>of_find_matching_node_and_match 函数通过<code>of_device_id</code>匹配表来查找指定的节点,函数原<br>型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_find_matching_node_and_match</span><span class="params">(struct device_node *from,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">const</span> struct of_device_id *matches,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">const</span> struct of_device_id **match)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:</p><p>from：开始查找的节点,如果为<code>NULL</code>表示从根节点开始查找整个设备树。<br>matches：<code>of_device_id</code>匹配表,也就是在此匹配表里面查找节点。<br>match：找到的匹配的<code>of_device_id</code>。</p><p>返回值：找到的节点,如果为<code>NULL</code>表示查找失败。</p></li></ul></li></ol></li></ol><ul><li><code>of_find_node_by_path</code>函数<br>of_find_node_by_path 函数通过路径来查找指定的节点,函数原型如下:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_find_node_by_path</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>path：带有全路径的节点名,可以使用节点的别名,比如<code>/backlight</code>就是<code>backlight</code>这个节点的全路径。<br>返回值：找到的节点,如果为<code>NULL</code>表示查找失败。</p><ol start="4"><li><p>查找父/子节点的of函数</p><ul><li><p><code>of_get_parent</code>函数</p><p>of_get_parent 函数用于获取指定节点的父节点(如果有父节点的话),函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_get_parent</span><span class="params">(<span class="keyword">const</span> struct device_node *node)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:</p><p>node：要查找的父节点的节点。<br>返回值：找到的父节点。</p></li><li><p><code>of_get_next_child</code>函数</p><p>of_get_next_child 函数用迭代的查找子节点,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct device_node *<span class="title">of_get_next_child</span><span class="params">(<span class="keyword">const</span> struct device_node *node,</span></span></span><br><span class="line"><span class="function"><span class="params">struct device_node *prev)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>node：父节点。<br>prev：前一个子节点,也就是从哪一个子节点开始迭代的查找下一个子节点。可以设置为<code>NULL</code>,表示从第一个子节点开始。<br>返回值：找到的下一个子节点。</p></li></ul></li></ol><ol start="5"><li><p>提取属性值的of函数</p><p>节点的属性信息里面保存了驱动所需要的内容,因此对于属性值的提取非常重要, Linux 内<br>核中使用结构体<code>property</code>表示属性,此结构体同样定义在文件<code>include/linux/of.h</code>中,内容如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">property</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *name;<span class="comment">/* 属性名字 */</span></span><br><span class="line"><span class="keyword">int</span> length; <span class="comment">/* 属性长度*/</span></span><br><span class="line"><span class="keyword">void</span> *value;<span class="comment">/* 属性值 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">property</span> *<span class="title">next</span>;</span><span class="comment">/* 下一个属性*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _flags; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> unique_id;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bin_attribute</span> <span class="title">attr</span>;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>of_find_property</code>函数</p><p>of_find_property 函数用于查找指定的属性,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">property *<span class="title">of_find_property</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">int</span> *lenp)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>name：属性名字。<br>lenp：属性值的字节数<br>返回值：找到的属性。</p></li><li><p><code>of_property_count_elems_of_size</code>函数</p><p>of_property_count_elems_of_size 函数用于获取属性中元素的数量,比如<code>reg</code>属性值是一个<br>数组,那么使用此函数可以获取到这个数组的大小,此函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_count_elems_of_size</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *propname, <span class="keyword">int</span> elem_size)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>proname：需要统计元素数量的属性名字。<br>elem_size：元素长度。<br>返回值：得到的属性元素数量。</p></li><li><p><code>of_property_read_u32_index</code>函数</p><p>of_property_read_u32_index 函数用于从属性中获取指定标号的<code>u32</code>类型数据值(无符号 32<br>位),比如某个属性有多个<code>u32</code>类型的值,那么就可以使用此函数来获取指定标号的数据值,此<br>函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u32_index</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *propname, u32 index,</span></span></span><br><span class="line"><span class="function"><span class="params">                               u32 *out_value)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>proname：要读取的属性名字。<br>index：要读取的值标号。<br>out_value：读取到的值<br>返回值：0 读取成功,负值,读取失败,<code>-EINVAL</code>表示属性不存在,<code>-ENODATA</code>表示没有<br>要读取的数据,<code>-EOVERFLOW</code>表示属性值列表太小。</p></li><li><p><code>of_property_read_u8_array</code> 函数<br><code>of_property_read_u16_array</code> 函数<br><code>of_property_read_u32_array</code> 函数<br><code>of_property_read_u64_array</code> 函数</p><p>这 4 个函数分别是读取属性中 <code>u8</code>、<code>u16</code>、<code>u32</code> 和 <code>u64</code> 类型的数组数据,比如大多数的<code>reg</code>属<br>性都是数组数据,可以使用这 4 个函数一次读取出<code>reg</code>属性中的所有数据。这四个函数的原型<br>如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u8_array</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> <span class="keyword">char</span> *propname,</span></span></span><br><span class="line"><span class="function"><span class="params">                                u8 *out_values, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u16_array</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> <span class="keyword">char</span> *propname,</span></span></span><br><span class="line"><span class="function"><span class="params">                                u16 *out_values, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u32_array</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> <span class="keyword">char</span> *propname,</span></span></span><br><span class="line"><span class="function"><span class="params">                                u32 *out_values, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u64_array</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">const</span> <span class="keyword">char</span> *propname,</span></span></span><br><span class="line"><span class="function"><span class="params">                                u64 *out_values,<span class="keyword">size_t</span> sz)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>proname：要读取的属性名字。<br>out_value：读取到的数组值,分别为<code>u8</code>、<code>u16</code>、<code>u32</code>和<code>u64</code>。<br>sz：要读取的数组元素数量。<br>返回值：0,读取成功,负值,读取失败,<code>-EINVAL</code>表示属性不存在,<code>-ENODATA</code>表示没<br>有要读取的数据,<code>-EOVERFLOW</code>表示属性值列表太小。</p></li><li><p><code>of_property_read_u8</code> 函数<br><code>of_property_read_u16</code> 函数<br><code>of_property_read_u32</code> 函数<br><code>of_property_read_u64</code> 函数</p><p>有些属性只有一个整形值,这四个函数就是用于读取这种只有一个整形值的属性,分别用<br>于读取 u8、u16、u32 和 u64 类型属性值,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u8</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *propname, u8*out_value)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u16</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">char</span> *propname, u16 *out_value)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u32</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">char</span>*propname, u32 *out_value)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_u64</span><span class="params">(<span class="keyword">const</span> struct device_node *np,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">char</span> *propname, u64 *out_value)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>proname：要读取的属性名字。<br>out_value：读取到的数组值。<br>返回值：0,读取成功,负值,读取失败,<code>-EINVAL</code>表示属性不存在,<code>-ENODATA</code>表示没<br>有要读取的数据,<code>-EOVERFLOW</code>表示属性值列表太小。</p></li><li><p><code>of_property_read_string</code> 函数</p><p>of_property_read_string 函数用于读取属性中字符串值,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_property_read_string</span><span class="params">(struct device_node *np,<span class="keyword">const</span> <span class="keyword">char</span> *propname,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> **out_string)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>proname：要读取的属性名字。<br>out_string：读取到的字符串值。<br>返回值：0,读取成功,负值,读取失败。</p></li><li><p><code>of_n_addr_cells</code> 函数</p><p>of_n_addr_cells 函数用于获取<code>#address-cells</code>属性值,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_n_addr_cells</span><span class="params">(struct device_node *np)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>返回值：获取到的<code>#address-cells</code>属性值。</p></li><li><p><code>of_n_size_cells</code> 函数</p><p>of_size_cells 函数用于获取<code>#size-cells</code>属性值,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_n_size_cells</span><span class="params">(struct device_node *np)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>返回值：获取到的<code>#size-cells</code>属性值。</p></li></ul></li><li><p>其他常用of函数</p><ul><li><p><code>of_device_is_compatible</code>函数</p><p>of_device_is_compatible 函数用于查看节点的<code>compatible</code>属性是否有包含<code>compat</code>指定的字<br>符串,也就是检查设备节点的兼容性,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_device_is_compatible</span><span class="params">(<span class="keyword">const</span> struct device_node *device,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> <span class="keyword">char</span> *compat)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>device：设备节点。<br>compat：要查看的字符串。<br>返回值： 0,节点的<code>compatible</code>属性中不包含<code>compat</code>指定的字符串;正数,节点的 <code>compatible</code><br>属性中包含<code>compat</code>指定的字符串。</p></li><li><p><code>of_get_address</code> 函数</p><p>of_get_address 函数用于获取地址相关属性,主要是<code>reg</code>或者<code>assigned-addresses</code>属性<br>值,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> __be32 *<span class="title">of_get_address</span><span class="params">(struct device_node *dev,<span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="function"><span class="params">                             u64 *<span class="built_in">size</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> *flags)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>dev：设备节点。<br>index：要读取的地址标号。<br>size：地址长度。<br>flags：参数,比如<code>IORESOURCE_IO</code>、<code>IORESOURCE_MEM</code>等<br>返回值：读取到的地址数据首地址,为<code>NULL</code>的话表示读取失败。</p></li><li><p><code>of_translate_address</code> 函数</p><p>of_translate_address 函数负责将从设备树读取到的地址转换为物理地址,函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">u64 <span class="title">of_translate_address</span><span class="params">(struct device_node *dev,<span class="keyword">const</span> __be32 *in_addr)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>dev：设备节点。<br>in_addr：要转换的地址。<br>返回值：得到的物理地址,如果为<code>OF_BAD_ADDR</code>的话表示转换失败。</p></li><li><p><code>of_address_to_resource</code> 函数</p><p><code>IIC</code>、<code>SPI</code>、<code>GPIO</code> 等这些外设都有对应的寄存器,这些寄存器其实就是一组内存空间,Linux<br>内核使用<code>resource</code>结构体来描述一段内存空间,“ resource”翻译出来就是“资源”,因此用<code>resource</code>结构体描述的都是设备资源信息,<code>resource</code>结构体定义在文件<code>include/linux/ioport.h</code>中,定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">resource</span> &#123;</span></span><br><span class="line">    <span class="keyword">resource_size_t</span> start;</span><br><span class="line">    <span class="keyword">resource_size_t</span> <span class="built_in">end</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> *<span class="title">parent</span>, *<span class="title">sibling</span>, *<span class="title">child</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于 32 位的 SOC 来说,<code>resource_size_t</code>是 <code>u32</code> 类型的。其中<code>start</code>表示开始地址,<code>end</code> 表示结束地址,<code>name</code>是这个资源的名字,<code>flags</code>是资源标志位,一般表示资源类型,可选的资源标志<br>定义在文件<code>include/linux/ioport.h</code>中,如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_BITS 0x000000ff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_TYPE_BITS 0x00001f00</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_IO 0x00000100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_MEM 0x00000200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_REG 0x00000300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_IRQ 0x00000400</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_DMA 0x00000800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_BUS 0x00001000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_PREFETCH 0x00002000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_READONLY 0x00004000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_CACHEABLE 0x00008000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_RANGELENGTH 0x00010000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_SHADOWABLE 0x00020000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_SIZEALIGN 0x00040000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_STARTALIGN 0x00080000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_MEM_64 0x00100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_WINDOW 0x00200000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_MUXED 0x00400000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_EXCLUSIVE 0x08000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_DISABLED 0x10000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_UNSET 0x20000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_AUTO 0x40000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IORESOURCE_BUSY 0x80000000</span></span><br></pre></td></tr></table></figure><p>一般最常见的资源标志就是<code>IORESOURCE_MEM</code>、 <code>IORESOURCE_REG</code>和<code>IORESOURCE_IRQ</code>等。接下来我们回到<code>of_address_to_resource</code>函数,此函数看名字像是从设备树里面提取资源值,但是本质上就是将<code>reg</code>属性值,然后将其转换为<code>resource</code>结构体类型,函数原型如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">of_address_to_resource</span><span class="params">(struct device_node *dev,<span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="function"><span class="params">                           struct resource *r)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>dev：设备节点。<br>index：地址资源标号。<br>r：得到的<code>resource</code>类型的资源值。<br>返回值：0,成功;负值,失败。</p></li><li><p><code>of_iomap</code>函数</p><p>of_iomap 函数用于直接内存映射,以前我们会通过<code>ioremap</code>函数来完成物理地址到虚拟地<br>址的映射,采用设备树以后就可以直接通过<code>of_iomap</code>函数来获取内存地址所对应的虚拟地址,<br>不需要使用<code>ioremap</code>函数了。当然了,你也可以使用<code>ioremap</code>函数来完成物理地址到虚拟地址<br>的内存映射,只是在采用设备树以后,大部分的驱动都使用<code>of_iomap</code>函数了，<code>of_iomap</code>函数本<br>质上也是将<code>reg</code>属性中地址信息转换为虚拟地址,如果<code>reg</code>属性有多段的话,可以通过<code>index</code>参<br>数指定要完成内存映射的是哪一段,<code>of_iomap</code>函数原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __iomem *<span class="title">of_iomap</span><span class="params">(struct device_node *np, <span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><p>函数参数和返回值含义如下:<br>np：设备节点。<br>index：<code>reg</code>属性中要完成内存映射的段,如果<code>reg</code>属性只有一段的话<code>index</code>就设置为 0。<br>返回值：经过内存映射后的虚拟内存首地址,如果为<code>NULL</code>的话表示内存映射失败。</p></li></ul></li></ol><h2 id="九、设备树添加内容（开发中一般不使用这种方式）"><a href="#九、设备树添加内容（开发中一般不使用这种方式）" class="headerlink" title="九、设备树添加内容（开发中一般不使用这种方式）"></a>九、设备树添加内容（开发中一般不使用这种方式）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自己添加的节点 2020-9-17 */</span></span><br><span class="line">alphaled &#123;</span><br><span class="line">    <span class="meta">#address-cells = <span class="meta-string">&lt;1&gt;;</span></span></span><br><span class="line">    <span class="meta">#size-cells = <span class="meta-string">&lt;1&gt;;</span></span></span><br><span class="line">    compatible = <span class="string">"atkalpha-led"</span>;</span><br><span class="line">    status = <span class="string">"okay"</span>;</span><br><span class="line">    reg = &lt;<span class="number">0X020C406C</span> <span class="number">0X04</span><span class="comment">/* CCM_CCGR1_BASE */</span></span><br><span class="line">        <span class="number">0X020E0068</span> <span class="number">0X04</span><span class="comment">/* SW_MUX_GPIO1_IO03_BASE */</span></span><br><span class="line">        <span class="number">0X020E02F4</span> <span class="number">0X04</span><span class="comment">/* SW_PAD_GPIO1_IO03_BASE */</span></span><br><span class="line">        <span class="number">0X0209C000</span> <span class="number">0X04</span><span class="comment">/* GPIO1_DR_BASE */</span></span><br><span class="line">        <span class="number">0X0209C004</span> <span class="number">0X04</span><span class="comment">/* GPIO1_GPIR_BASE */</span></span><br><span class="line">        &gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="十、驱动使用设备树例子"><a href="#十、驱动使用设备树例子" class="headerlink" title="十、驱动使用设备树例子"></a>十、驱动使用设备树例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ide.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_address.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_irq.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 入口和出口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">dtsof_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">np</span> = <span class="title">NULL</span>;</span> <span class="comment">// 节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">property</span> *<span class="title">comppro</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str;</span><br><span class="line">u32 def_value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> elesize = <span class="number">0</span>;</span><br><span class="line">u32 *brival;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 找到backlight节点 */</span></span><br><span class="line">np = of_find_node_by_path(<span class="string">"/backlight"</span>);</span><br><span class="line"><span class="keyword">if</span> (np == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_findnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取属性 */</span></span><br><span class="line">comppro = of_find_property(np, <span class="string">"compatible"</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (comppro == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_findpro;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"compatible=%s\r\n"</span>, (<span class="keyword">char</span> *)comppro-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = of_property_read_string(np, <span class="string">"status"</span>, &amp;str);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"status=%s\r\n"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 获取数字属性值 */</span></span><br><span class="line">ret = of_property_read_u32(np, <span class="string">"default-brightness-level"</span>, &amp;def_value);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_read_u32;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"default-brightness-level = %d\r\n"</span>, def_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取数组类型的属性 */</span></span><br><span class="line">elesize = of_property_count_elems_of_size(np, <span class="string">"brightness-levels"</span>, <span class="keyword">sizeof</span>(u32));</span><br><span class="line"><span class="keyword">if</span> (elesize &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_readele;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"brightness-levels elems size = %d\r\n"</span>, elesize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 申请内存 */</span></span><br><span class="line">brival = kmalloc(elesize * <span class="keyword">sizeof</span>(u32), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!brival)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取数组 */</span></span><br><span class="line">ret = of_property_read_u32_array(np, <span class="string">"brightness-levels"</span>, brival, elesize);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_read32array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; elesize; i++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"brightness-levels[%d] = %d \r\n"</span>, i, brival[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">kfree(brival);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">fail_read32array:</span><br><span class="line">kfree(brival);<span class="comment">/* 释放内存 */</span></span><br><span class="line">fail_mem:</span><br><span class="line">fail_readele:</span><br><span class="line">fail_read_u32:</span><br><span class="line">fail_rs:</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line">fail_findpro:</span><br><span class="line">fail_findnd:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">dtsof_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册入口和出口函数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">module_init(dtsof_init);</span><br><span class="line">module_exit(dtsof_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"fengyuhang"</span>);</span><br></pre></td></tr></table></figure><h2 id="十一、设备树下的LED驱动实验"><a href="#十一、设备树下的LED驱动实验" class="headerlink" title="十一、设备树下的LED驱动实验"></a>十一、设备树下的LED驱动实验</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ide.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_address.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/of_irq.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DTSLED_CNT1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DTSLED_NAME<span class="meta-string">"dtsled"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDOFF0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDON 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 虚拟地址的指针 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *CCM_CCGR1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_MUX_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_PAD_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_GDIR;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_DR;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtsled_dev</span> &#123;</span></span><br><span class="line"><span class="keyword">dev_t</span> devid;<span class="comment">/* 设备号 */</span></span><br><span class="line"><span class="keyword">int</span> major;<span class="comment">/* 主设备号 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class</span> *<span class="title">class</span>;</span><span class="comment">/* 类 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">device</span>;</span><span class="comment">/* 设备 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">nd</span>;</span><span class="comment">/* 设备节点 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtsled_dev</span> <span class="title">dtsled</span>;</span><span class="comment">/* LED设备 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_toggle</span><span class="params">(u8 state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(state == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 打开LED</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 关闭LED</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dtsled_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">filp-&gt;private_data = &amp;dtsled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dtsled_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtsled_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">dtsled_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> retvalue;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtsled_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"></span><br><span class="line">retvalue = copy_from_user(databuff, buf, count);</span><br><span class="line"><span class="keyword">if</span> (retvalue &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"kernel write failed!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (databuff[<span class="number">0</span>] == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDON);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDOFF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符操作设备集 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">dtsled_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">write</span> = dtsled_write,</span><br><span class="line">.<span class="built_in">open</span> = dtsled_open,</span><br><span class="line">.<span class="built_in">release</span> = dtsled_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 入口和出口 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">dtsled_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str;</span><br><span class="line">u32 regdata[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.注册字符设备 */</span></span><br><span class="line"><span class="comment">/* 1.1 申请设备号 */</span></span><br><span class="line">dtsled.major = <span class="number">0</span>;<span class="comment">/* 设备号由内核分配 */</span></span><br><span class="line"><span class="keyword">if</span> (dtsled.major)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义了设备号 */</span></span><br><span class="line">dtsled.devid = MKDEV(dtsled.major,<span class="number">0</span>);</span><br><span class="line">ret = register_chrdev_region(dtsled.devid, DTSLED_CNT, DTSLED_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 没有给定设备号,向内核申请*/</span></span><br><span class="line">ret = alloc_chrdev_region(&amp;dtsled.devid, <span class="number">0</span>, DTSLED_CNT, DTSLED_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_devid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.1 添加字符设备 */</span></span><br><span class="line">dtsled.cdev.owner = THIS_MODULE;</span><br><span class="line">cdev_init(&amp;dtsled.cdev, &amp;dtsled_fops);</span><br><span class="line">ret = cdev_add(&amp;dtsled.cdev, dtsled.devid, DTSLED_CNT);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.自动创建设备节点 */</span></span><br><span class="line"><span class="comment">/* 3.1 创建类 */</span></span><br><span class="line">dtsled<span class="class">.<span class="keyword">class</span> = <span class="title">class_create</span>(<span class="title">THIS_MODULE</span>,<span class="title">DTSLED_NAME</span>);</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(dtsled.class))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(dtsled.class);</span><br><span class="line"><span class="keyword">goto</span> fail_class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.2创建设备 */</span></span><br><span class="line">dtsled.device = device_create(dtsled.class, <span class="literal">NULL</span>, dtsled.devid, <span class="literal">NULL</span>, DTSLED_NAME);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(dtsled.device))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(dtsled.device);</span><br><span class="line"><span class="keyword">goto</span> fail_device;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取设备树属性内容 */</span></span><br><span class="line">dtsled.nd = of_find_node_by_path(<span class="string">"/alphaled"</span>);</span><br><span class="line"><span class="keyword">if</span> (dtsled.nd == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">goto</span> fail_findnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = of_property_read_string(dtsled.nd, <span class="string">"status"</span>, &amp;str);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"status = %s\r\n"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = of_property_read_string(dtsled.nd, <span class="string">"compatible"</span>, &amp;str);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"compatible = %s\r\n"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">ret = of_property_read_u32_array(dtsled.nd, <span class="string">"reg"</span>, regdata, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"red data："</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"%#x "</span>, regdata[i]);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED初始化 */</span></span><br><span class="line"><span class="comment">/* 地址映射 */</span></span><br><span class="line"></span><br><span class="line">CCM_CCGR1 = ioremap(regdata[<span class="number">0</span>], regdata[<span class="number">1</span>]);</span><br><span class="line">SW_MUX_GPIO1_IO03 = ioremap(regdata[<span class="number">2</span>], regdata[<span class="number">3</span>]);</span><br><span class="line">SW_PAD_GPIO1_IO03 = ioremap(regdata[<span class="number">4</span>], regdata[<span class="number">5</span>]);</span><br><span class="line">GPIO1_DR = ioremap(regdata[<span class="number">6</span>], regdata[<span class="number">7</span>]);</span><br><span class="line">GPIO1_GDIR = ioremap(regdata[<span class="number">8</span>], regdata[<span class="number">9</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* 使用of_iomap直接获取地址映射 */</span></span><br><span class="line">CCM_CCGR1 = of_iomap(dtsled.nd, <span class="number">0</span>);</span><br><span class="line">SW_MUX_GPIO1_IO03 = of_iomap(dtsled.nd, <span class="number">1</span>);</span><br><span class="line">SW_PAD_GPIO1_IO03 = of_iomap(dtsled.nd, <span class="number">2</span>);</span><br><span class="line">GPIO1_DR = of_iomap(dtsled.nd, <span class="number">3</span>);</span><br><span class="line">GPIO1_GDIR = of_iomap(dtsled.nd, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">val = readl(CCM_CCGR1);</span><br><span class="line">val &amp;= ~(<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">val |= (<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">writel(val, CCM_CCGR1);<span class="comment">// 使能时钟</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x5</span>, SW_MUX_GPIO1_IO03);<span class="comment">// 设置复用</span></span><br><span class="line">writel(<span class="number">0x10b0</span>, SW_PAD_GPIO1_IO03);<span class="comment">// 设置电气属性</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_GDIR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_GDIR);<span class="comment">// 设置输出</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 默认打开LED</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail_rs:</span><br><span class="line">fail_findnd:</span><br><span class="line">device_destroy(dtsled.class, dtsled.devid);</span><br><span class="line">fail_device:</span><br><span class="line">class_destroy(dtsled.class);</span><br><span class="line">fail_class:</span><br><span class="line">cdev_del(&amp;dtsled.cdev);</span><br><span class="line">fail_cdev:</span><br><span class="line">unregister_chrdev_region(dtsled.devid, DTSLED_CNT);</span><br><span class="line">fail_devid:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">dtsled_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 取消地址映射 */</span></span><br><span class="line">iounmap(CCM_CCGR1);</span><br><span class="line">iounmap(SW_MUX_GPIO1_IO03);</span><br><span class="line">iounmap(SW_PAD_GPIO1_IO03);</span><br><span class="line">iounmap(GPIO1_DR);</span><br><span class="line">iounmap(GPIO1_GDIR);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 摧毁设备 */</span></span><br><span class="line">device_destroy(dtsled.class, dtsled.devid);</span><br><span class="line"><span class="comment">/* 摧毁类 */</span></span><br><span class="line">class_destroy(dtsled.class);</span><br><span class="line"><span class="comment">/* 删除字符设备 */</span></span><br><span class="line">cdev_del(&amp;dtsled.cdev);</span><br><span class="line"><span class="comment">/* 释放设备号 */</span></span><br><span class="line">unregister_chrdev_region(dtsled.devid, DTSLED_CNT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册驱动和卸载驱动 */</span></span><br><span class="line">module_init(dtsled_init);</span><br><span class="line">module_exit(dtsled_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"fengyuhang"</span>);</span><br></pre></td></tr></table></figure><h2 id="十二、测试应用程序"><a href="#十二、测试应用程序" class="headerlink" title="十二、测试应用程序"></a>十二、测试应用程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ./ledAPP &lt;filename&gt; &lt;0:1&gt; 1 表示开灯 0 表示关灯</span></span><br><span class="line"><span class="comment"> * @param argc 应用程序参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 保存的参数，字符串形式。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *filename;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( argc !=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入错误\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">fd = <span class="built_in">open</span>(filename, O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Error: %s\r\n"</span>,filename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读 */</span></span><br><span class="line"><span class="comment">/* if (atoi(argv[2]) ==1 )// 传递过来的是字符串，需要转换成数字</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ret = read(fd, readbuf, 10);</span></span><br><span class="line"><span class="comment">if (ret &lt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("read file %s failed\r\n", filename);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line">databuff[<span class="number">0</span>] = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写 */</span></span><br><span class="line">ret = <span class="built_in">write</span>(fd, databuff, <span class="keyword">sizeof</span>(databuff));</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"LED control failed!\r\n"</span>);</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭 */</span></span><br><span class="line">ret = <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（四）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html</id>
    <published>2020-09-19T13:48:02.000Z</published>
    <updated>2020-09-19T13:51:04.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="一、新字符设备驱动原理（相比于上一篇笔记）"><a href="#一、新字符设备驱动原理（相比于上一篇笔记）" class="headerlink" title="一、新字符设备驱动原理（相比于上一篇笔记）"></a>一、新字符设备驱动原理（相比于上一篇笔记）</h2><ol><li><p>以前的缺点：</p><p>使用 <code>register_chrdev</code> 函数注册字符设备，会浪费很多次设备号，而且需要手动指定。</p></li><li><p>新的方法：</p><p>使用 <code>alloc_chrdev_region</code> 函数申请设备号。原型如下：</p><a id="more"></a></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> *dev, <span class="keyword">unsigned</span> baseminor, <span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure><p>卸载驱动的时候，使用 <code>unregister_chrdev_region</code> 函数释放前面申请的设备号，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregister_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from, <span class="keyword">unsigned</span> count)</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>指定设备号</p><p>如果指定主设备号，使用 <code>register_chrdev_region</code> 函数来注册，原型如下：</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from, <span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure><pre><code>一般是给定主设备号，然后使用 `MADEV` 构建完整的 `dev_t` ，一般次设备号选择`0`。</code></pre><ol start="4"><li><p>实际的驱动编写</p><p>需要考虑实际情况，因为在实际开发中会有两种情况：给定设备号和没有给定设备号。</p></li><li><p>字符设备注册</p><p><code>cdev</code> 结构体表示字符设备，然后使用 <code>cdev_init</code> 函数来初始化 <code>cdev</code> ，原型</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdev_init(struct cdev *cdev, <span class="keyword">const</span> struct file_operations *fops)</span><br></pre></td></tr></table></figure><p>​ <code>cdev_init</code> 初始化完成 <code>cdev</code> 后，使用 <code>cdev_add</code> 添加到Linux内核，删除字符设备使用 <code>cdev_del</code> 。</p><h2 id="二、自动创建设备节点"><a href="#二、自动创建设备节点" class="headerlink" title="二、自动创建设备节点"></a>二、自动创建设备节点</h2><ol><li>linux内核在2.6版本中引入了 <code>udev</code> 机制，替换<code>devfs</code> 。<code>udev</code> 机制提供热插拔管理，可以在加载驱动的时候自动创建 <code>/dev/xxx</code> 设备文件。</li><li>在使用busybox构建根文件系统的时候，busybox会创建一个 <code>udev</code> 的简化版本 <code>mdev</code> ，所以在嵌入式linux中使用 <code>mdev</code> 来实现设备节点文件的自动创建和删除。linux系统中的热插拔事件也由 <code>mdev</code> 管理，在 <code>/etc/init.d/rsS</code> 文件中如下语句。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11 <span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">12 mdev -s</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建设备节点<br>3.1. 创建类</p><p>创建设备节点需要先 使用<code>class_create()</code> 函数创建类。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建类 */</span></span><br><span class="line">newChrLed<span class="class">.<span class="keyword">class</span> = <span class="title">class_create</span>(<span class="title">THIS_MODULE</span>, <span class="title">LED_NAME</span>);</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(newChrLed.class))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PTR_ERR(newChrLed.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2. 创建设备</p><p>使用 <code>device_create()</code> 函数来创建设备。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建设备 */</span></span><br><span class="line">newChrLed.device = device_create(newChrLed.class, <span class="literal">NULL</span>, newChrLed.devid, <span class="literal">NULL</span>, LED_NAME);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(newChrLed.device))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> PTR_ERR(newChrLed.device);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>销毁设备和类</p><p>在驱动卸载的时候，需要对设备进行销毁。在驱动出口函数中使用如下代码进行销毁：</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 摧毁设备 */</span></span><br><span class="line">device_destroy(newChrLed.class, newChrLed.devid);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 摧毁类 */</span></span><br><span class="line">class_destroy(newChrLed.class);</span><br></pre></td></tr></table></figure><p>​ <strong>因为创建设备是根据类来创建的，因此在销毁时，需要先销毁设备再销毁类。</strong></p><h2 id="三、文件私有数据"><a href="#三、文件私有数据" class="headerlink" title="三、文件私有数据"></a>三、文件私有数据</h2><ol><li>在 <code>open</code> 函数里设置 <code>filp-&gt;private_data</code> 为设备变量。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置私有数据 */</span></span><br><span class="line">filp-&gt;private_data= &amp;newChrLed;</span><br></pre></td></tr></table></figure><ol start="2"><li>在其他的函数里，要访问设备的时候，直接读取私有数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">newChrLed_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br></pre></td></tr></table></figure><h2 id="四、错误处理"><a href="#四、错误处理" class="headerlink" title="四、错误处理"></a>四、错误处理</h2><p>​ 在 <code>xxx_init</code> 加载驱动出现错误的时候，可以使用 <code>goto</code> 语句，对错误进行处理。比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">newChrLed.cdev.owner = THIS_MODULE;</span><br><span class="line">ret = cdev_init(&amp;newChrLed.cdev, &amp;newChrLed_fops);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">goto</span> fail_cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = cdev_add(&amp;newChrLed.cdev, newChrLed.devid, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">goto</span> fail_cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fail_cdev:</span><br><span class="line"><span class="comment">/* 删除字符设备 */</span></span><br><span class="line">cdev_del(&amp;newChrLed.cdev);</span><br><span class="line"><span class="comment">/* 因为cdev初始化失败，所以需要注销设备号 */</span></span><br><span class="line">unregister_chrdev_region(newChrLed.devid, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h2 id="五、整体程序（开发中不使用这种方式）"><a href="#五、整体程序（开发中不使用这种方式）" class="headerlink" title="五、整体程序（开发中不使用这种方式）"></a>五、整体程序（开发中不使用这种方式）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ide.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_NAME<span class="meta-string">"LED"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 寄存器物理地址 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR1_BASE(0X020C406C)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_MUX_GPIO1_IO03_BASE(0X020E0068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_PAD_GPIO1_IO03_BASE(0X020E02F4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_GDIR_BASE(0X0209C004)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_DR_BASE(0X0209C000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 虚拟地址的指针 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *CCM_CCGR1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_MUX_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_PAD_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_GDIR;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_DR;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDOFF0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDON 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED设备结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">newChrLed_dev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span><span class="comment">// cdev</span></span><br><span class="line"><span class="keyword">dev_t</span> devid;<span class="comment">// 设备号</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class</span> *<span class="title">class</span>;</span><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">device</span>;</span><span class="comment">// 设备</span></span><br><span class="line"><span class="keyword">int</span> major;<span class="comment">// 主设备号</span></span><br><span class="line"><span class="keyword">int</span> minor;<span class="comment">// 次设备号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">newChrLed_dev</span> <span class="title">newChrLed</span>;</span><span class="comment">// LED设备</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_toggle</span><span class="params">(u8 state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(state == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 打开LED</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 关闭LED</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newchrled_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 设置私有数据 */</span></span><br><span class="line">filp-&gt;private_data= &amp;newChrLed;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newchrled_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">filp-&gt;private_data = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">newchrled_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> * off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> retvalue;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// struct newChrLed_dev *dev = filp-&gt;private_data;</span></span><br><span class="line">retvalue = copy_from_user(databuff, buf, len);</span><br><span class="line"><span class="keyword">if</span> (retvalue &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"kernel write failed!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (databuff[<span class="number">0</span>] == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDON);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDOFF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">newChrLed_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">write</span> = newchrled_write,</span><br><span class="line">.<span class="built_in">open</span> = newchrled_open,</span><br><span class="line">.<span class="built_in">release</span> = newchrled_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">newchrled_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 1.初始化LED */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 初始化LED灯，地址映射 */</span></span><br><span class="line">CCM_CCGR1 = ioremap(CCM_CCGR1_BASE, <span class="number">4</span>);</span><br><span class="line">SW_MUX_GPIO1_IO03 = ioremap(SW_MUX_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">SW_PAD_GPIO1_IO03 = ioremap(SW_PAD_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_GDIR = ioremap(GPIO1_GDIR_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_DR = ioremap(GPIO1_DR_BASE, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">val = readl(CCM_CCGR1);</span><br><span class="line">val &amp;= ~(<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">val |= (<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">writel(val, CCM_CCGR1);<span class="comment">// 使能时钟</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x5</span>, SW_MUX_GPIO1_IO03);<span class="comment">// 设置复用</span></span><br><span class="line">writel(<span class="number">0x10b0</span>, SW_PAD_GPIO1_IO03);<span class="comment">// 设置电气属性</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_GDIR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_GDIR);<span class="comment">// 设置输出</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 默认打开LED</span></span><br><span class="line"></span><br><span class="line">newChrLed.major = <span class="number">0</span>;<span class="comment">// 设置为0，表示由系统自动分配设备号</span></span><br><span class="line"><span class="comment">/* 2.注册字符设备 */</span></span><br><span class="line"><span class="keyword">if</span> (newChrLed.major)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 给定主设备号</span></span><br><span class="line">newChrLed.devid = MKDEV(newChrLed.major, <span class="number">0</span>);</span><br><span class="line">ret = register_chrdev_region(newChrLed.devid, <span class="number">1</span>, LED_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 没有给定主设备号</span></span><br><span class="line">ret = alloc_chrdev_region(&amp;newChrLed.devid, <span class="number">0</span>, <span class="number">1</span>, LED_NAME);</span><br><span class="line">newChrLed.major = MAJOR(newChrLed.devid);</span><br><span class="line">newChrLed.minor = MINOR(newChrLed.devid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"newchrled chrdev_region error!\r\n"</span>);</span><br><span class="line"><span class="keyword">goto</span> fail_devid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"newchrled major = %d, minor = %de\r\n"</span>, newChrLed.major, newChrLed.minor);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.字符设备注册 */</span></span><br><span class="line">newChrLed.cdev.owner = THIS_MODULE;</span><br><span class="line">cdev_init(&amp;newChrLed.cdev, &amp;newChrLed_fops);</span><br><span class="line">ret = cdev_add(&amp;newChrLed.cdev, newChrLed.devid, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> fail_cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.自动创建设备节点 */</span></span><br><span class="line"><span class="comment">/* 创建类 */</span></span><br><span class="line">newChrLed<span class="class">.<span class="keyword">class</span> = <span class="title">class_create</span>(<span class="title">THIS_MODULE</span>, <span class="title">LED_NAME</span>);</span></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(newChrLed.class))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(newChrLed.class);</span><br><span class="line"><span class="keyword">goto</span> fail_class;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建设备 */</span></span><br><span class="line">newChrLed.device = device_create(newChrLed.class, <span class="literal">NULL</span>, newChrLed.devid, <span class="literal">NULL</span>, LED_NAME);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(newChrLed.device))</span><br><span class="line">&#123;</span><br><span class="line">ret = PTR_ERR(newChrLed.device);</span><br><span class="line"><span class="keyword">goto</span> fail_device;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail_device:</span><br><span class="line">class_destroy(newChrLed.class);</span><br><span class="line"></span><br><span class="line">fail_class:</span><br><span class="line"><span class="comment">/* 删除字符设备 */</span></span><br><span class="line">cdev_del(&amp;newChrLed.cdev);</span><br><span class="line"></span><br><span class="line">fail_cdev:</span><br><span class="line"><span class="comment">/* 因为cdev初始化失败，所以需要注销设备号 */</span></span><br><span class="line">unregister_chrdev_region(newChrLed.devid, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fail_devid:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">newchrled_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 取消地址映射 */</span></span><br><span class="line">iounmap(IMX6U_CCM_CCGR1);</span><br><span class="line">iounmap(SW_MUX_GPIO1_IO03);</span><br><span class="line">iounmap(SW_PAD_GPIO1_IO03);</span><br><span class="line">iounmap(GPIO1_DR);</span><br><span class="line">iounmap(GPIO1_GDIR);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 删除字符设备 */</span></span><br><span class="line">cdev_del(&amp;newChrLed.cdev);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注销设备号 */</span></span><br><span class="line">unregister_chrdev_region(newChrLed.devid, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 摧毁设备 */</span></span><br><span class="line">device_destroy(newChrLed.class, newChrLed.devid);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 摧毁类 */</span></span><br><span class="line">class_destroy(newChrLed.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册入口和出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">module_init(newchrled_init);</span><br><span class="line">module_exit(newchrled_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"fengyuhang"</span>);</span><br></pre></td></tr></table></figure><h2 id="六、测试应用程序"><a href="#六、测试应用程序" class="headerlink" title="六、测试应用程序"></a>六、测试应用程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ./ledAPP &lt;filename&gt; &lt;0:1&gt; 1 表示开灯 0 表示关灯</span></span><br><span class="line"><span class="comment"> * @param argc 应用程序参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 保存的参数，字符串形式。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *filename;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( argc !=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入错误\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">fd = <span class="built_in">open</span>(filename, O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Error: %s\r\n"</span>,filename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读 */</span></span><br><span class="line"><span class="comment">/* if (atoi(argv[2]) == 1)// 传递过来的是字符串，需要转换成数字</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ret = read(fd, readbuf, 10);</span></span><br><span class="line"><span class="comment">if (ret &lt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("read file %s failed\r\n", filename);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line">databuff[<span class="number">0</span>] = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写 */</span></span><br><span class="line">ret = <span class="built_in">write</span>(fd, databuff, <span class="keyword">sizeof</span>(databuff));</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"LED control failed!\r\n"</span>);</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭 */</span></span><br><span class="line">ret = <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（三）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</id>
    <published>2020-09-19T13:44:12.000Z</published>
    <updated>2020-09-19T13:47:48.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="一、地址映射"><a href="#一、地址映射" class="headerlink" title="一、地址映射"></a>一、地址映射</h2><ol><li><p>因为<code>linux</code>使用<code>MMC</code>，因此在驱动开发时，不能直接对寄存器物理地址进行读写操作。</p></li><li><p>在<code>linux</code>里面操作的都是虚拟地址，所以需要先得到物理地址对应的虚拟地址。获得物理地址对应的虚拟地址使用<code>va = ioremap(cookie,size)</code>函数，第一个参数是物理地址起始地址，第二个参数就是要转换的字节数量，返回的是申请到的虚拟地址。卸载驱动的时候使用<code>iounmap(va)</code>；</p><a id="more"></a></li><li><p>操作虚拟地址时使用</p><ul><li><code>readb(const volatile void __iomem *addr)</code> 8bit</li><li><code>readw(const volatile void __iomem *addr)</code> 16bit</li><li><code>readl(const volatile void __iomem *addr)</code> 32bit</li><li><code>writeb(u8 value,volatile void __iomem *addr)</code> 8bit</li><li><code>writew(u16 value, volatile void __iomem *addr)</code> 16bit</li><li><code>writel(u32 value, volatile void __iomem *addr)</code> 32bit</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 初始化LED灯，地址映射 */</span></span><br><span class="line">CCM_CCGR1 = ioremap(CCM_CCGR1_BASE, <span class="number">4</span>);</span><br><span class="line">SW_MUX_GPIO1_IO03 = ioremap(SW_MUX_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">SW_PAD_GPIO1_IO03 = ioremap(SW_PAD_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_GDIR = ioremap(GPIO1_GDIR_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_DR = ioremap(GPIO1_DR_BASE, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">val = readl(CCM_CCGR1);</span><br><span class="line">val &amp;= ~(<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">val |= (<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">writel(val, CCM_CCGR1);<span class="comment">// 使能时钟</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x5</span>, SW_MUX_GPIO1_IO03);<span class="comment">// 设置复用</span></span><br><span class="line">writel(<span class="number">0x10b0</span>, SW_PAD_GPIO1_IO03);<span class="comment">// 设置电气属性</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_GDIR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_GDIR);<span class="comment">// 设置输出</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 默认打开LED</span></span><br><span class="line"></span><br><span class="line">ret = register_chrdev(LED_MAJOR, LED_NAME, &amp;led_fops);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"led_init failed! \r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"led_init\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">led_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 取消地址映射 */</span></span><br><span class="line">iounmap(CCM_CCGR1);</span><br><span class="line">iounmap(SW_MUX_GPIO1_IO03);</span><br><span class="line">iounmap(SW_PAD_GPIO1_IO03);</span><br><span class="line">iounmap(GPIO1_GDIR);</span><br><span class="line">iounmap(GPIO1_DR);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注销字符设备 */</span></span><br><span class="line">unregister_chrdev(LED_MAJOR,LED_NAME);</span><br><span class="line">printk(<span class="string">"led_exit\r\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、驱动程序编写（正常开发中不使用这种方式）"><a href="#二、驱动程序编写（正常开发中不使用这种方式）" class="headerlink" title="二、驱动程序编写（正常开发中不使用这种方式）"></a>二、驱动程序编写（正常开发中不使用这种方式）</h2><ol><li>初始化时钟、IO、GPIO等。</li><li><strong>如果要在卸载驱动时关闭LED，一定要在取消地址映射前操作LED。</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ide.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_MAJOR100<span class="comment">// 主设备号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_NAME<span class="meta-string">"LED"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 寄存器物理地址 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR1_BASE(0X020C406C)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_MUX_GPIO1_IO03_BASE(0X020E0068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_PAD_GPIO1_IO03_BASE(0X020E02F4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_GDIR_BASE(0X0209C004)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_DR_BASE(0X0209C000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 虚拟地址的指针 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *CCM_CCGR1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_MUX_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *SW_PAD_GPIO1_IO03;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_GDIR;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __iomem *GPIO1_DR;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDOFF0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDON 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_toggle</span><span class="params">(u8 state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(state == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 打开LED</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 关闭LED</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">led_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">led_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">led_write</span><span class="params">(struct file * fp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> * off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> retvalue;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line">retvalue = copy_from_user(databuff, buf, len);</span><br><span class="line"><span class="keyword">if</span> (retvalue &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"kernel write failed!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (databuff[<span class="number">0</span>] == LEDON)</span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDON);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">led_toggle(LEDOFF);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符设备操作集 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">led_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">write</span> = led_write,</span><br><span class="line">.<span class="built_in">open</span> = led_open,</span><br><span class="line">.<span class="built_in">release</span> = led_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 模块入口函数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 初始化LED灯，地址映射 */</span></span><br><span class="line">CCM_CCGR1 = ioremap(CCM_CCGR1_BASE, <span class="number">4</span>);</span><br><span class="line">SW_MUX_GPIO1_IO03 = ioremap(SW_MUX_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">SW_PAD_GPIO1_IO03 = ioremap(SW_PAD_GPIO1_IO03_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_GDIR = ioremap(GPIO1_GDIR_BASE, <span class="number">4</span>);</span><br><span class="line">GPIO1_DR = ioremap(GPIO1_DR_BASE, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line">val = readl(CCM_CCGR1);</span><br><span class="line">val &amp;= ~(<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">val |= (<span class="number">3</span> &lt;&lt; <span class="number">26</span>);</span><br><span class="line">writel(val, CCM_CCGR1);<span class="comment">// 使能时钟</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x5</span>, SW_MUX_GPIO1_IO03);<span class="comment">// 设置复用</span></span><br><span class="line">writel(<span class="number">0x10b0</span>, SW_PAD_GPIO1_IO03);<span class="comment">// 设置电气属性</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_GDIR);</span><br><span class="line">val |= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_GDIR);<span class="comment">// 设置输出</span></span><br><span class="line"></span><br><span class="line">val = readl(GPIO1_DR);</span><br><span class="line">val &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">writel(val, GPIO1_DR);<span class="comment">// 默认打开LED</span></span><br><span class="line"></span><br><span class="line">ret = register_chrdev(LED_MAJOR, LED_NAME, &amp;led_fops);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"led_init failed! \r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"led_init\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">led_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 如果要在卸载驱动时关闭LED，一定要在取消地址映射前操作LED */</span></span><br><span class="line"><span class="comment">/* 取消地址映射 */</span></span><br><span class="line">iounmap(CCM_CCGR1);</span><br><span class="line">iounmap(SW_MUX_GPIO1_IO03);</span><br><span class="line">iounmap(SW_PAD_GPIO1_IO03);</span><br><span class="line">iounmap(GPIO1_GDIR);</span><br><span class="line">iounmap(GPIO1_DR);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注销字符设备 */</span></span><br><span class="line">unregister_chrdev(LED_MAJOR,LED_NAME);</span><br><span class="line">printk(<span class="string">"led_exit\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 驱动的加载和卸载</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">module_init(led_init);</span><br><span class="line">module_exit(led_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="三、应用程序编写"><a href="#三、应用程序编写" class="headerlink" title="三、应用程序编写"></a>三、应用程序编写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ./ledAPP &lt;filename&gt; &lt;0:1&gt; 1 表示开灯 0 表示关灯</span></span><br><span class="line"><span class="comment"> * @param argc 应用程序参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 保存的参数，字符串形式。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *filename;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> databuff[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( argc !=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入错误\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">fd = <span class="built_in">open</span>(filename, O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Error: %s\r\n"</span>,filename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读 */</span></span><br><span class="line"><span class="comment">/* if (atoi(argv[2]) ==1 )// 传递过来的是字符串，需要转换成数字</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ret = read(fd, readbuf, 10);</span></span><br><span class="line"><span class="comment">if (ret &lt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("read file %s failed\r\n", filename);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line">databuff[<span class="number">0</span>] = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写 */</span></span><br><span class="line">ret = <span class="built_in">write</span>(fd, databuff, <span class="keyword">sizeof</span>(databuff));</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"LED control failed!\r\n"</span>);</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭 */</span></span><br><span class="line">ret = <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><ol><li>先输入 <code>depmod</code>。</li><li>然后输入 <code>modprobe led.ko</code> 加载驱动</li><li>再输入 <code>mknod /dev/led</code> 创建设备节点</li><li>输入 <code>./ledAPP /dev/led 0</code> 或 <code>./ledAPP /dev/led 1</code> 来点亮和关闭 <code>led</code> 。</li></ol>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（二）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html</id>
    <published>2020-09-19T13:40:24.000Z</published>
    <updated>2020-09-19T13:45:34.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="一、字符设备驱动"><a href="#一、字符设备驱动" class="headerlink" title="一、字符设备驱动"></a>一、字符设备驱动</h2><p>字符设备驱动的编写主要就是驱动对应的<code>open</code>、<code>close</code>、<code>read</code>、<code>write</code>函数。其实就是file_operations结构体的成员变量的实现。</p><h2 id="二、驱动模块的加载与卸载"><a href="#二、驱动模块的加载与卸载" class="headerlink" title="二、驱动模块的加载与卸载"></a>二、驱动模块的加载与卸载</h2><p>Linux驱动程序可以编译到kernel里面，也就是zImage，也可以编译为模块(.ko)。测试的时候只需要加载.ko模块就行。</p><ul><li><code>module_init(xxx_init);</code> //注册模块加载函数</li><li><code>module_exit(xxx_exit)</code> //注册模块卸载函数</li></ul><a id="more"></a><p>编写驱动的时候注意事项！</p><ol><li><p>编译驱动的时候需要用到<code>linux</code>内核源码！因此需要解压缩<code>linux</code>源码，编译<code>linux</code>内核源码。得到<code>zImage</code>和<code>dtb</code>。需要使用编译后得到的<code>zImage</code>和<code>dtb</code>启动系统。</p><p><code>vscode</code>中设置<code>linux</code>源码所在路径，<code>.vscode/c_cpp_properties.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Linux"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span>,</span><br><span class="line">                <span class="string">"/home/rabbit/linux/IMX6UL/linux_image/linux-imx-alientek/include"</span>, </span><br><span class="line">                <span class="string">"/home/rabbit/linux/IMX6UL/linux_image/linux-imx-alientek/arch/arm/include"</span>, </span><br><span class="line">                <span class="string">"/home/rabbit/linux/IMX6UL/linux_image/linux-imx-alientek/arch/arm/include/generated/"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"/usr/bin/gcc"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>makefile</code>内容</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内核路径</span></span><br><span class="line">KERNELDIR := /home/rabbit/linux/IMX6UL/linux_image/linux-imx-alientek</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前路径</span></span><br><span class="line">CURRENT_PATH := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标文件</span></span><br><span class="line">obj-m := chrdevbase.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则</span></span><br><span class="line">build : kernel_modules</span><br><span class="line"></span><br><span class="line"><span class="section">kernel_modules:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDIR)</span> M=<span class="variable">$(CURRENT_PATH)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDIR)</span> M=<span class="variable">$(CURRENT_PATH)</span> clean</span><br></pre></td></tr></table></figure></li><li><p>将编译出来的<code>.ko</code>文件放到根文件系统中。加载驱动会用到加载命令：<code>insmod</code>，<code>modprobe</code>。移除驱动使用命令：<code>rmmod</code>，查看加载的驱动模块命令：<code>lsmod</code>。</p><ul><li><code>insmod</code>：不会解决模块的依赖关系。</li><li><code>modprobe</code>：可以处理模块的依赖关系。<strong>推荐使用</strong>，<code>modprobe</code>会到<code>lib/modules/内核版本</code>下查找相应的驱动模块。</li></ul><p>==对于一个新的模块使用<code>modprode</code>加载的时候需要先调用一下<code>depmod</code>命令。==</p></li></ol><h2 id="三、字符设备的注册与注销"><a href="#三、字符设备的注册与注销" class="headerlink" title="三、字符设备的注册与注销"></a>三、字符设备的注册与注销</h2><ol><li><p>我们需要向系统注册一个字符设备，使用函数（即将弃用）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> init <span class="title">register_chrdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> struct file_operations *fops)</span></span></span><br></pre></td></tr></table></figure></li><li><p>卸载驱动的时候需要注销掉前面注册的字符设备，使用函数（即将弃用）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unregister_chrdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>major</code>：主设备号，linux下每个设备都有一个设备号，设备号分为主设备号和次设备号两个部分。传入<code>0</code>自动分配。</li><li><code>name</code>：设备名字，指向一串字符串。</li><li><code>fops</code>：结构体<code>file_operations</code>类型指针，指向设备的操作函数集合变量。</li></ul></li></ol><h2 id="四、设备号"><a href="#四、设备号" class="headerlink" title="四、设备号"></a>四、设备号</h2><ol><li><p>linux内核使用<code>dev_t</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">__kernel_dev_t</span><span class="keyword">dev_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> __u32 <span class="keyword">__kernel_dev_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> __u32;</span><br></pre></td></tr></table></figure><p>其中 <code>dev_t</code> 是一个无符号32位整型数据，其中高12位为主设备号(0～4096，表示同一类设备，比如IIC设备)，低20位为次设备号。</p></li><li><p>设备号的操作函数或宏</p><p>从<code>dev_t</code>获取主设备号和次设备号，<code>MAJOR(dev_t)</code>，<code>MINOR(dev_t)</code>，也可以使用主设备号和次设备号构成<code>dev_t</code>，通过<code>MKDE(major, minor)</code>即可。</p></li></ol><h2 id="五、file-operations的具体实现"><a href="#五、file-operations的具体实现" class="headerlink" title="五、file_operations的具体实现"></a>五、file_operations的具体实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">read</span>) (struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">write</span>) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*read_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*write_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line"><span class="keyword">int</span> (*iterate) (struct file *, struct dir_context *);</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</span><br><span class="line"><span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);</span><br><span class="line"><span class="keyword">int</span> (*mremap)(struct file *, struct vm_area_struct *);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">open</span>) (struct inode *, struct file *);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">flush</span>) (struct file *, <span class="keyword">fl_owner_t</span> id);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">release</span>) (struct inode *, struct file *);</span><br><span class="line"><span class="keyword">int</span> (*fsync) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">loff_t</span>, <span class="keyword">int</span> datasync);</span><br><span class="line"><span class="keyword">int</span> (*aio_fsync) (struct kiocb *, <span class="keyword">int</span> datasync);</span><br><span class="line"><span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, struct file *, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*lock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*sendpage) (struct file *, struct page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(struct file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*flock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*splice_write)(struct pipe_inode_info *, struct file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">ssize_t</span> (*splice_read)(struct file *, <span class="keyword">loff_t</span> *, struct pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*setlease)(struct file *, <span class="keyword">long</span>, struct file_lock **, <span class="keyword">void</span> **);</span><br><span class="line"><span class="keyword">long</span> (*fallocate)(struct file *file, <span class="keyword">int</span> mode, <span class="keyword">loff_t</span> offset,</span><br><span class="line">  <span class="keyword">loff_t</span> len);</span><br><span class="line"><span class="keyword">void</span> (*show_fdinfo)(struct seq_file *m, struct file *f);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line"><span class="keyword">unsigned</span> (*mmap_capabilities)(struct file *);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="六、字符设备驱动框架"><a href="#六、字符设备驱动框架" class="headerlink" title="六、字符设备驱动框架"></a>六、字符设备驱动框架</h2><p>多借鉴别人的驱动程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHRDEVBASE_MAJOR100<span class="comment">// 主设备号，0自动分配</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHRDEVBASE_NAME<span class="meta-string">"chrdevbase"</span><span class="comment">// 名字</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chrdevbase_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_open!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chrdevbase_close</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_close!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">chrdevbase_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_read!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">chrdevbase_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_write!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">chrdevbase_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">open</span> = chrdevbase_open,</span><br><span class="line">.<span class="built_in">release</span> = chrdevbase_close,</span><br><span class="line">.<span class="built_in">read</span> = chrdevbase_read,</span><br><span class="line">.<span class="built_in">write</span> = chrdevbase_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">chrdevbase_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"chrdevbase_init\r\n"</span>);</span><br><span class="line"><span class="comment">/* 注册字符设备 */</span></span><br><span class="line">ret = register_chrdev(CHRDEVBASE_MAJOR, CHRDEVBASE_NAME, &amp;chrdevbase_fops);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_init failed\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">chrdevbase_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_exit\r\n"</span>);</span><br><span class="line">unregister_chrdev(CHRDEVBASE_MAJOR, CHRDEVBASE_NAME);</span><br><span class="line"><span class="comment">/* 注销字符设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块入口与出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">module_init(chrdevbase_init);<span class="comment">// 入口函数</span></span><br><span class="line">module_exit(chrdevbase_exit);<span class="comment">// 出口函数</span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="七、编写应用程序"><a href="#七、编写应用程序" class="headerlink" title="七、编写应用程序"></a>七、编写应用程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ./chrdevbaseAPP &lt;filename&gt;</span></span><br><span class="line"><span class="comment"> * @param argc 应用程序参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 保存的参数，字符串形式。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *filename;</span><br><span class="line"><span class="keyword">char</span> readbuf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> writebuf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">filename = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">fd = <span class="built_in">open</span>(filename, O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"can't open file %s\r\n"</span>,filename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读 */</span></span><br><span class="line">ret = <span class="built_in">read</span>(fd, readbuf, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"read file %s failed\r\n"</span>, filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 写 */</span></span><br><span class="line">ret = <span class="built_in">write</span>(fd, writebuf, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write file %s failed\r\n"</span>, filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭 */</span></span><br><span class="line">ret = <span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"close file %s failed\r\n"</span>, filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、测试"><a href="#八、测试" class="headerlink" title="八、测试"></a>八、测试</h2><ol><li><p>加载驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe chrdevbase.ko</span><br></pre></td></tr></table></figure></li><li><p>进入<code>/dev</code>查看设备文件，<code>chrdevbase</code>。但是由于没有创建设备节点<code>/dev/chrdevbase</code>并不会存在。这里使用<code>mknod /dev/chardevbase c 100 0</code>手动创建设备节点。</p></li><li><p>测试</p><p><code>./chrdevbaseAPP /dev/chrdevbase</code></p></li></ol><h2 id="九、完善chrdevbase虚拟字符设备驱动程序"><a href="#九、完善chrdevbase虚拟字符设备驱动程序" class="headerlink" title="九、完善chrdevbase虚拟字符设备驱动程序"></a>九、完善chrdevbase虚拟字符设备驱动程序</h2><ul><li>驱动给应用传递数据的时候需要用到<code>copy_to_user(to, from, n)</code>函数；</li><li>应用给驱动传递数据的时候需要用到<code>copy_from_user(to, from, n)</code>函数；</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHRDEVBASE_MAJOR100<span class="comment">// 主设备号，0自动分配</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHRDEVBASE_NAME<span class="meta-string">"chrdevbase"</span><span class="comment">// 名字</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> readbuf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> writebuf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> kerneldata[] = &#123;<span class="string">"kernel data!"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chrdevbase_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_open!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chrdevbase_close</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_close!\r\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">chrdevbase_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* printk("chrdevbase_read!\r\n"); */</span></span><br><span class="line">ret = copy_to_user(buf, kerneldata, count);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">chrdevbase_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* printk("chrdevbase_write!\r\n"); */</span></span><br><span class="line">ret = copy_from_user(writebuf, buf, count);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"kernel recevdata:%s\r\n"</span>,writebuf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">chrdevbase_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.<span class="built_in">open</span> = chrdevbase_open,</span><br><span class="line">.<span class="built_in">release</span> = chrdevbase_close,</span><br><span class="line">.<span class="built_in">read</span> = chrdevbase_read,</span><br><span class="line">.<span class="built_in">write</span> = chrdevbase_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">chrdevbase_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"chrdevbase_init\r\n"</span>);</span><br><span class="line"><span class="comment">/* 注册字符设备 */</span></span><br><span class="line">ret = register_chrdev(CHRDEVBASE_MAJOR, CHRDEVBASE_NAME, &amp;chrdevbase_fops);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_init failed\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">chrdevbase_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(<span class="string">"chrdevbase_exit\r\n"</span>);</span><br><span class="line">unregister_chrdev(CHRDEVBASE_MAJOR, CHRDEVBASE_NAME);</span><br><span class="line"><span class="comment">/* 注销字符设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块入口与出口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">module_init(chrdevbase_init);<span class="comment">// 入口函数</span></span><br><span class="line">module_exit(chrdevbase_exit);<span class="comment">// 出口函数</span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL嵌入式Linux驱动学习笔记（一）</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html</id>
    <published>2020-09-19T13:29:29.000Z</published>
    <updated>2020-09-19T13:45:54.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="一、应用程序和驱动的交互原理交互原理"><a href="#一、应用程序和驱动的交互原理交互原理" class="headerlink" title="一、应用程序和驱动的交互原理交互原理"></a>一、应用程序和驱动的交互原理交互原理</h2><p>驱动就是获取外设或者传感器数据，控制外设。数据会提交给应用程序。Linux下驱动编写既要编写一个驱动，还要编写一个简单的测试应用程序APP。单片机下驱动和应用都是放到一个文件里面，也就是杂糅到一起。Linux下驱动和应用是完全分开的。</p><a id="more"></a><ul><li><p>用户空间（用户态）和内核空间（内核态）</p><ul><li><p>Linux操作系统内核和驱动程序运行在内核空间，应用程序运行在用户空间，避免应用程序不正确的使用资源对系统产生危害。</p></li><li><p>应用程序想要访问内核资源有三种办法：系统调用、异常（中断）和陷入（软中断）。应用程序不会直接调用系统调用，而是通过API函数来间接的调用系统调用，比如<code>POSIX</code>、<code>API</code>和C库等。<code>unix</code>类操作系统种最常用的编程接口就是<code>POSIX</code>。</p></li><li><p>系统调用处于内核空间，应用程序无法直接访问，因此需要“陷入”到内核，方法就是软中断，陷入内核以后还要指定系统调用号。（每个系统调用都有一个系统调用号）。</p><p><img src="https://i.loli.net/2020/09/19/JfkY7L3mF98EhvT.png" alt="linux应用和驱动交互"></p></li><li><p>应用程序可以直接使用系统调用函数，比如：<code>open</code>、<code>close</code>等，也可以使用C库提供的函数。上图的左侧竖线表示直接使用系统调用，右侧竖线表示使用C库里面的函数，而C库里面的函数最终也是调用的系统调用函数。</p></li></ul></li></ul><h2 id="二、嵌入式驱动开发分类"><a href="#二、嵌入式驱动开发分类" class="headerlink" title="二、嵌入式驱动开发分类"></a>二、嵌入式驱动开发分类</h2><p>Linux驱动分为3大类：</p><ol><li>字符设备驱动，最多的。</li><li>块设备驱动，存储。</li><li>网络设备驱动。</li></ol><p>一个设备不一定只属于某一个类型。比如无线网卡，属于网络设备驱动，因为他又有<code>USB</code>和<code>SDIO</code>，因此也属于字符设备驱动。</p><h2 id="三、字符设备驱动开发"><a href="#三、字符设备驱动开发" class="headerlink" title="三、字符设备驱动开发"></a>三、字符设备驱动开发</h2><ul><li>Linux里面一切皆文件，驱动设备表现就是一个<code>/dev/</code>目录下的一个文件，比如<code>/dev/led</code>文件，应用程序调用<code>open</code>函数打开设备，比如led。应用程序通过<code>write</code>函数向<code>/dev/led</code>写数据，比如写1表示打开，写0代表关闭。如果关闭设备就是调用<code>close</code>函数。</li><li>编写驱动的时候也需要编写驱动对应的<code>open</code>、<code>close</code>、<code>read</code>、<code>write</code>函数。字符设备驱动<code>file_operation</code>结构体。</li></ul><ol><li>驱动最终是被应用调用的，在写驱动的时候要考虑应用开发的便利性。</li><li>驱动是分驱动框架的，要按照驱动框架来编写，对于字符设备驱动来说，重点编写应用程序对应的<code>open</code>、<code>close</code>、<code>read</code>、<code>write</code>等函数。</li></ol>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL嵌入式Linux开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(七)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83.html</id>
    <published>2020-09-18T15:14:24.000Z</published>
    <updated>2020-09-18T15:31:24.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="1-根文件系统简介"><a href="#1-根文件系统简介" class="headerlink" title="1. 根文件系统简介"></a>1. 根文件系统简介</h2><p>根文件系统就是一个特殊的”文件夹“，这个特殊的“文件夹”中保存着Linux运行所必须的，但是无法放入内核里面去。比如命令、库、配置文件等等。</p><a id="more"></a><h2 id="2-构建根文件系统"><a href="#2-构建根文件系统" class="headerlink" title="2. 构建根文件系统"></a>2. 构建根文件系统</h2><p>初学使用busybox来构建，做项目时使用成熟化的根文件系统构建方式，buildroot，yocto。</p><ol><li><p>修改Makefile，添加交叉编译器</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARCH ?= arm</span><br><span class="line"></span><br><span class="line">CROSS_COMPILE ?= /usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-g     nueabihf/bin/arm-linux-gnueabihf-</span><br></pre></td></tr></table></figure></li><li><p>修改busybox，添加中文字符支持</p><p>修改<code>libbb/printable_string.c</code>中的<code>printable_string</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c &lt; <span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/* if (c &gt;= 0x7f)</span></span><br><span class="line"><span class="comment">break; */</span></span><br><span class="line">s++;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c == <span class="string">'\0'</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="string">' '</span>)</span><br><span class="line">    *d = <span class="string">'?'</span>;</span><br><span class="line">d++;</span><br></pre></td></tr></table></figure><p>修改<code>libbb/unicode.c</code>中的<code>unicode_conv_to_printable2</code>函数内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (unicode_status != UNICODE_ON) &#123;</span><br><span class="line">    <span class="keyword">char</span> *d;</span><br><span class="line">    <span class="keyword">if</span> (flags &amp; UNI_FLAG_PAD) &#123;</span><br><span class="line">        d = dst = xmalloc(<span class="built_in">width</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="keyword">int</span>)--<span class="built_in">width</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> c = *src;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    *d++ = <span class="string">' '</span>;</span><br><span class="line">                <span class="keyword">while</span> ((<span class="keyword">int</span>)--<span class="built_in">width</span> &gt;= <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* *d++ = (c &gt;= ' ' &amp;&amp; c &lt; 0x7f) ? c : '?'; */</span></span><br><span class="line">            *d++ = (c &gt;= <span class="string">' '</span>) ? c : <span class="string">'?'</span>;</span><br><span class="line">            src++;</span><br><span class="line">        &#125;</span><br><span class="line">        *d = <span class="string">'\0'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        d = dst = xstrndup(src, <span class="built_in">width</span>);</span><br><span class="line">        <span class="keyword">while</span> (*d) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> c = *d;</span><br><span class="line">            <span class="comment">/* if (c &lt; ' ' || c &gt;= 0x7f) */</span></span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="string">' '</span>)</span><br><span class="line">                *d = <span class="string">'?'</span>;</span><br><span class="line">            d++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stats) &#123;</span><br><span class="line">        stats-&gt;byte_count = (d - dst);</span><br><span class="line">        stats-&gt;unicode_count = (d - dst);</span><br><span class="line">        stats-&gt;unicode_width = (d - dst);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置busybox</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure><p>打开图形化界面，进行相关配置。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>然后编译busybox</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install CONFIG_PREFIX=/home/rabbit/linux/nfs/rootfs</span><br></pre></td></tr></table></figure></li><li><p>向根文件系统添加<code>lib</code>库文件</p><p>库文件是交叉编译器的库文件。</p></li></ol><ul><li><p>将<code>/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux- gnueabihf/libc/lib</code>，<code>/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/lib</code>下的内容拷贝到<code>rootfs</code>下的<code>lib</code>文件夹内。</p></li><li><p>重新拷贝<code>ld-linux-armhf.so.3</code>文件到<code>rootfs</code>下的<code>lib</code>中，而不是上面拷贝的软链接文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ld-linux-armhf.so.3 &#x2F;home&#x2F;zuozhongkai&#x2F;linux&#x2F;nfs&#x2F;rootfs&#x2F;lib&#x2F;&#96;</span><br></pre></td></tr></table></figure></li><li><p>拷贝<code>/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/lib</code>下的文件到<code>rootfs/usr/lib</code>下。</p></li><li><p>最后在根文件系统中创建其他文件夹,如 <code>dev</code>、<code>proc</code>、<code>mnt</code>、<code>sys</code>、<code>tmp</code> 和 <code>root</code> 等。</p></li></ul><h2 id="3-根文件系统初步测试"><a href="#3-根文件系统初步测试" class="headerlink" title="3.根文件系统初步测试"></a>3.根文件系统初步测试</h2><p>​ 为了方便开发测试，使用<code>NFS</code>挂载测试。Linux内核文件中有说明命令行参数如何设置。要求：</p><ol><li>linux的内核网络驱动要工作正常。</li><li>设置uboot的<code>bootargs</code>，也就是linux内核的命令行参数。其中<code>ip</code>的参数为<code>本机地址:服务器地址:网关:子网掩码:[主机名]:网卡:自动配置</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs &#39;console&#x3D;ttymxc0,115200 root&#x3D;&#x2F;dev&#x2F;nfs nfsroot&#x3D;192.168.1.102:&#x2F;home&#x2F;rabbit&#x2F;linux&#x2F;nfs&#x2F;rootfs,proto&#x3D;tcp rw ip&#x3D;192.168.1.170:192.168.1.102:192.168.1.1:255.255.255.0::eth0:off&#39;</span><br></pre></td></tr></table></figure><p>==如果挂载失败，显示如下信息==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VFS: Unable to mount root fs via NFS, trying floppy.</span><br><span class="line">VFS: Cannot open root device &quot;nfs&quot; or unknown-block(2,0): error -6</span><br></pre></td></tr></table></figure><p>修改<code>bootargs</code> 环境变量为以下的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs &#39;console&#x3D;ttymxc0,115200 root&#x3D;&#x2F;dev&#x2F;nfs nfsroot&#x3D;192.168.1.102:&#x2F;home&#x2F;rabbit&#x2F;linux&#x2F;nfs&#x2F;rootfs,nfsvers&#x3D;3,proto&#x3D;tcp rw ip&#x3D;192.168.1.170:192.168.1.102:192.168.1.1:255.255.255.0::eth0:off&#39;</span><br></pre></td></tr></table></figure><h2 id="4-完善根文件系统"><a href="#4-完善根文件系统" class="headerlink" title="4. 完善根文件系统"></a>4. 完善根文件系统</h2><p>由于出现以下错误，因此需要完善根文件系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can&#39;t run &#39;&#x2F;etc&#x2F;init.d&#x2F;rcS&#39;: No such file or directory</span><br></pre></td></tr></table></figure><ol><li>创建<code>/etc/init.d/rcS</code> 写入以下内容</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line">LD_LIBRARY_PATH=<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>:/lib:/usr/lib</span><br><span class="line"><span class="built_in">export</span> PATH LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">mount -a</span><br><span class="line">mkdir /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>/etc/fstab</code>文件，写入以下内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#&lt;file system&gt; &lt;mount point&gt;&lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line">proc            &#x2F;proc           proc    defaults        0       0</span><br><span class="line">tmpfs           &#x2F;tmp            tmpfs   defaults        0       0</span><br><span class="line">sysfs           &#x2F;sys            sysfs   defaults        0       0</span><br><span class="line">tmpfs           &#x2F;dev            tmpfs   defaults        0       0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建<code>/etc/inittab</code> 文件，写入如下内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#&#x2F;etc&#x2F;initable</span><br><span class="line">::sysinit:&#x2F;etc&#x2F;init.d&#x2F;rcS</span><br><span class="line">console::askfirst:-&#x2F;bin&#x2F;sh</span><br><span class="line">::restart:&#x2F;sbin&#x2F;init</span><br><span class="line">::ctrlaltdel:&#x2F;sbin&#x2F;reboot</span><br><span class="line">::shutdown:&#x2F;bin&#x2F;umount -a -r</span><br><span class="line">::shutdowm:&#x2F;sbin&#x2F;swapoff -a</span><br></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><ol><li>写个小程序测试下</li></ol><p><code>hello.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello-world\r\n"</span>);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是运行在<code>ARM</code>上，所以需要使用交叉编译器编译这个<code>.c</code>文件，可以使用<code>file</code>命令来查看信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-gnueabihf-gcc hello.c -o hello</span><br></pre></td></tr></table></figure><ol start="2"><li>开机自启动</li></ol><p>在<code>/etc/init.d/rcS</code>添加开机自启动程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开机自启动</span></span><br><span class="line">/root/hello &amp;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>设置域名解析服务器地址（DNS）</p><p>新建<code>/etc/resolv.conf</code>，写入以下内容</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 192.168.1.1</span><br></pre></td></tr></table></figure><p>此时就可以<code>ping www.baidu.com</code>了。</p>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(六)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD.html</id>
    <published>2020-09-18T15:11:20.000Z</published>
    <updated>2020-09-18T15:30:55.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="移植NXP官方的linux和设备树到开发板"><a href="#移植NXP官方的linux和设备树到开发板" class="headerlink" title="移植NXP官方的linux和设备树到开发板"></a>移植NXP官方的linux和设备树到开发板</h2><ol><li><p>首先使用默认配置文件，编译下测试linux能否在板子上运行。配置文件所在路径<code>arch/arm/configs/imx_v7_mfg_defconfig</code></p></li><li><p>通过修改NXP官方的默认配置文件和dtb配置文件，来适配开发板。</p><blockquote><p>imx_v7_mfg_defconfig</p><p>imx6ull-14x14-evk-emmc.dtb</p></blockquote></li></ol><a id="more"></a><ol start="3"><li><p>修改<code>arch/arm/boot/dts</code> 下的 <code>Makefile</code> 文件，将修改后的dtb文件，添加进去。</p><p>编译设备树文件，<code>make dtbs</code>。</p></li><li><p>修改主频和网络驱动（需要保证linux系统可以正常运行，因此需要暂时使用根文件系统）</p></li></ol><ul><li><p>设置<code>bootcmd</code> 环境变量，使用 的是SD卡启动，镜像和设备树存放在SD卡中， <code>setenv bootcmd &#39;fatload mmc 0:1 80800000 zimage;fatload mmc 0:1 83000000 imx6ull-14x14-myboard.dtb;bootz 80800000 - 83000000;&#39;</code></p></li><li><p>设置<code>bootargs</code>，根文件系统存放在EMMC的分区2中，命令如下：<code>setenv bootargs &#39;console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw&#39;</code></p></li><li><p>将<code>imx6ull-14x14-myboard.dts</code>中的<code>usdhc2</code>节点，改为以下内容。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pinctrl-names = <span class="string">"default"</span>, <span class="string">"state_100mhz"</span>, <span class="string">"state_200mhz"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_usdhc2_8bit&gt;;</span><br><span class="line">pinctrl<span class="number">-1</span> = &lt;&amp;pinctrl_usdhc2_8bit_100mhz&gt;;</span><br><span class="line">pinctrl<span class="number">-2</span> = &lt;&amp;pinctrl_usdhc2_8bit_200mhz&gt;;</span><br><span class="line">bus-<span class="built_in">width</span> = &lt;<span class="number">8</span>&gt;;</span><br><span class="line">non-removable;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br></pre></td></tr></table></figure><ul><li>然后使用<code>boot</code> 命令启动<code>linux</code>，至此启动完成。</li></ul><ol start="5"><li><p>修改网络驱动。</p><p>修改dts文件对应位置代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pinctrl_spi4: spi4grp &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6ULL_PAD_BOOT_MODE0__GPIO5_IO10 <span class="number">0x70a1</span></span><br><span class="line">MX6ULL_PAD_BOOT_MODE1__GPIO5_IO11 <span class="number">0x70a1</span></span><br><span class="line"><span class="comment">/*MX6ULL_PAD_SNVS_TAMPER7__GPIO5_IO07 0x70a1</span></span><br><span class="line"><span class="comment">MX6ULL_PAD_SNVS_TAMPER8__GPIO5_IO08 0x80000000*/</span></span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spi4 &#123;</span><br><span class="line">    compatible = <span class="string">"spi-gpio"</span>;</span><br><span class="line">    pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">    pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_spi4&gt;;</span><br><span class="line">    <span class="comment">/* pinctrl-assert-gpios = &lt;&amp;gpio5 8 GPIO_ACTIVE_LOW&gt;; */</span></span><br><span class="line">    status = <span class="string">"okay"</span>;</span><br><span class="line">    gpio-sck = &lt;&amp;gpio5 <span class="number">11</span> <span class="number">0</span>&gt;;</span><br><span class="line">    gpio-mosi = &lt;&amp;gpio5 <span class="number">10</span> <span class="number">0</span>&gt;;</span><br><span class="line">    <span class="comment">/* cs-gpios = &lt;&amp;gpio5 7 0&gt;; */</span></span><br><span class="line">    num-chipselects = &lt;<span class="number">1</span>&gt;;</span><br><span class="line">    <span class="meta">#address-cells = <span class="meta-string">&lt;1&gt;;</span></span></span><br><span class="line">    <span class="meta">#size-cells = <span class="meta-string">&lt;0&gt;;</span></span></span><br><span class="line"></span><br><span class="line">    gpio_spi: gpio_spi@<span class="number">0</span> &#123;</span><br><span class="line">        compatible = <span class="string">"fairchild,74hc595"</span>;</span><br><span class="line">        gpio-controller;</span><br><span class="line">        <span class="meta">#gpio-cells = <span class="meta-string">&lt;2&gt;;</span></span></span><br><span class="line">        reg = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">        registers-number = &lt;<span class="number">1</span>&gt;;</span><br><span class="line">        registers-<span class="keyword">default</span> = /bits/ <span class="number">8</span> &lt;<span class="number">0x57</span>&gt;;</span><br><span class="line">        spi-<span class="built_in">max</span>-frequency = &lt;<span class="number">100000</span>&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pinctrl_enet1: enet1grp &#123;</span><br><span class="line">    fsl,pins = &lt;</span><br><span class="line">        MX6UL_PAD_ENET1_RX_EN__ENET1_RX_EN<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_RX_ER__ENET1_RX_ER<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_RX_DATA0__ENET1_RDATA00<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_RX_DATA1__ENET1_RDATA01<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_TX_EN__ENET1_TX_EN<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_TX_DATA0__ENET1_TDATA00<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_TX_DATA1__ENET1_TDATA01<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET1_TX_CLK__ENET1_REF_CLK1<span class="number">0x4001b031</span></span><br><span class="line">        MX6UL_PAD_SNVS_TAMPER7__GPIO5_IO07 <span class="number">0x10b0</span><span class="comment">/* ENET1_RESET */</span></span><br><span class="line">        &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pinctrl_enet2: enet2grp &#123;</span><br><span class="line">    fsl,pins = &lt;</span><br><span class="line">        MX6UL_PAD_GPIO1_IO07__ENET2_MDC<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_GPIO1_IO06__ENET2_MDIO<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_RX_EN__ENET2_RX_EN<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_RX_ER__ENET2_RX_ER<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_RX_DATA0__ENET2_RDATA00<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_RX_DATA1__ENET2_RDATA01<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_TX_EN__ENET2_TX_EN<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_TX_DATA0__ENET2_TDATA00<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_TX_DATA1__ENET2_TDATA01<span class="number">0x1b0b0</span></span><br><span class="line">        MX6UL_PAD_ENET2_TX_CLK__ENET2_REF_CLK2<span class="number">0x4001b031</span></span><br><span class="line">        MX6UL_PAD_SNVS_TAMPER8__GPIO5_IO08 <span class="number">0x10b0</span><span class="comment">/* ENET2_RESET */</span></span><br><span class="line">        &gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&amp;fec1 &#123;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_enet1&gt;;</span><br><span class="line">phy-mode = <span class="string">"rmii"</span>;</span><br><span class="line">phy-handle = &lt;&amp;ethphy0&gt;;</span><br><span class="line">phy-reset-gpios = &lt;&amp;gpio5 <span class="number">7</span> GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">phy-reset-duration = &lt;<span class="number">200</span>&gt;;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&amp;fec2 &#123;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_enet2&gt;;</span><br><span class="line">phy-mode = <span class="string">"rmii"</span>;</span><br><span class="line">phy-handle = &lt;&amp;ethphy1&gt;;</span><br><span class="line">phy-reset-gpios = &lt;&amp;gpio5 <span class="number">8</span> GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">phy-reset-duration = &lt;<span class="number">200</span>&gt;;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br><span class="line"></span><br><span class="line">mdio &#123;</span><br><span class="line"><span class="meta">#address-cells = <span class="meta-string">&lt;1&gt;;</span></span></span><br><span class="line"><span class="meta">#size-cells = <span class="meta-string">&lt;0&gt;;</span></span></span><br><span class="line"></span><br><span class="line">ethphy0: ethernet-phy@<span class="number">0</span> &#123;</span><br><span class="line">compatible = <span class="string">"ethernet-phy-ieee802.3-c22"</span>;</span><br><span class="line">reg = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ethphy1: ethernet-phy@<span class="number">1</span> &#123;</span><br><span class="line">compatible = <span class="string">"ethernet-phy-ieee802.3-c22"</span>;</span><br><span class="line">reg = &lt;<span class="number">1</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改<code>drivers/net/ethernet/freescale/fec_main.c</code>中的<code>fec_probe</code>函数，添加如下代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置 MX6UL_PAD_ENET1_TX_CLK 和 MX6UL_PAD_ENET2_TX_CLK</span></span><br><span class="line"><span class="comment">* 这两个 IO 的复用寄存器的 SION 位为 1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> __iomem *IMX6U_ENET1_TX_CLK;</span><br><span class="line"><span class="keyword">void</span> __iomem *IMX6U_ENET2_TX_CLK;</span><br><span class="line"></span><br><span class="line">IMX6U_ENET1_TX_CLK = ioremap(<span class="number">0X020E00DC</span>, <span class="number">4</span>);</span><br><span class="line">writel(<span class="number">0X14</span>, IMX6U_ENET1_TX_CLK);</span><br><span class="line"></span><br><span class="line">IMX6U_ENET2_TX_CLK = ioremap(<span class="number">0X020E00FC</span>, <span class="number">4</span>);</span><br><span class="line">writel(<span class="number">0X14</span>, IMX6U_ENET2_TX_CLK);</span><br></pre></td></tr></table></figure><p>然后编译下设备树文件，并且在图形化界面中使能<code>LAN8720A</code>的驱动。</p><blockquote><ol><li><p>Device Drivers</p></li><li><p>Network device support</p></li><li><p>PHY Device support and infrastructure</p></li><li><p>Drivers for SMSC PHYs</p></li></ol></blockquote></li></ol><p>最后编译下Linux的内核文件。</p><p>然后使用如下命令加载Linux镜像到内存中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   fatload mmc <span class="number">0</span>:<span class="number">1</span> <span class="number">80800000</span> zimage </span><br><span class="line">fatload mmc <span class="number">0</span>:<span class="number">1</span> <span class="number">83000000</span> imx6ull<span class="number">-14</span>x14-myboard.dts </span><br><span class="line">   bootz <span class="number">80800000</span> - <span class="number">83000000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(五)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94.html</id>
    <published>2020-09-18T15:08:01.000Z</published>
    <updated>2020-09-19T14:43:46.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="1-移植NXP官方-uboot-到-alpha-开发板"><a href="#1-移植NXP官方-uboot-到-alpha-开发板" class="headerlink" title="1. 移植NXP官方 uboot 到 alpha 开发板"></a>1. 移植NXP官方 uboot 到 alpha 开发板</h2><ol><li><p>添加板子默认配置文件</p><p>借鉴NXP官方6ull evk 开发板，修改NXP官方6ull evk开发板配置文件<code>configs/mx6ull_14x14_evk_emmc_defconfig</code>并重命名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SYS_EXTRA_OPTIONS&#x3D;&quot;IMX_CONFIG&#x3D;board&#x2F;freescale&#x2F;mx6ull_myboard_emmc&#x2F;imximage.cfg,MX6ULL_EVK_EMMC_REWORK&quot;</span><br><span class="line">CONFIG_ARM&#x3D;y</span><br><span class="line">CONFIG_ARCH_MX6&#x3D;y</span><br><span class="line">CONFIG_TARGET_MX6ULL_MYBOARD_EMMC&#x3D;y</span><br><span class="line">CONFIG_CMD_GPIO&#x3D;y</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>添加板子对应的头文件</p><p>不同的板子，有一些需要配置的信息，一般是在一个头文件里配置，每个板子有一个。对于NXP官方的6ULL EVK板子，头文件是<code>include/configs/mx6ullevk.h</code>，复制该文件为<code>mx6ull_myboard_emmc.h</code>，然后修改<code>mx6ull_myboard_emmc.h</code>该文件内的条件编译为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __MX6ULL_MYBOARD_EMMC_CONFIG_H</span><br><span class="line">#define __MX6ULL_MYBOARD_EMMC_CONFIG_H</span><br></pre></td></tr></table></figure></li><li><p>添加板子对应的板级文件夹</p><p>每个板子都有特有的文件，也叫板级文件。这里我们将6ULL EVK的板级文件夹<code>board/freescale/mx6ullevk</code>直接拷贝一份，并重命名为<code>mx6ull_myboard_emmc</code> 。修改<code>mx6ull_myboard_emmc</code>文件夹中的<code>mx6ullevk.c</code> <code>Makefile</code> <code>imximage.cfg</code> <code>Kconfig</code> <code>MAINTAINERS</code>文件。 最后需要修改<code>arch/arm/cpu/armv7/mx6/Kconfig</code>文件，添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config TARGET_MX6ULL_MYBOARD_EMMC</span><br><span class="line">bool &quot;Support mx6ull_myboard_emmc&quot;</span><br><span class="line">select MX6ULL</span><br><span class="line">select DM</span><br><span class="line">select DM_THERMAL</span><br><span class="line"></span><br><span class="line">source &quot;board&#x2F;freescale&#x2F;mx6ull_myboard_emmc&#x2F;Kconfig&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改uboot图形配置界面</p></li><li><p>LCD驱动修改</p><p>修改<code>board/mx6ull_myboard_emmc/mx6ull_myboard_emmc.c</code> <code>include/configs/mx6ull_myboard_emmc.h</code> 文件来修改驱动。</p><ul><li>确认LCD IO 初始化正确，修改<code>mx6ull_myboard_emmc.c</code>中的LCD_PADS</li><li>修改LCD 参数，<code>mx6ull_myboard_emmc.c</code>中的displays。fb_videomode表示RGB LCD参数。</li><li>修改<code>mx6ull_myboard_emmc.h</code>的环境变量panel=TFT43AB 为<code>mx6ull_myboard_emmc.c</code>中<code>display_info_t const displays[]</code>中的<code>name</code>值。</li></ul></li><li><p>网络驱动修改</p><p>LAN8720有一个管理接口，叫做MDIO，有两根线 <code>MDIO</code>、<code>MDC</code>，一个MDIO接口可以管理32个PHY芯片。MDIO通过<code>PHY ADDR</code>来确定访问哪个PHY芯片。ALPHA开发板的<code>ENET1</code>的<code>PHY ADDR</code>是<code>0x0</code>, <code>ENET2</code>的PHY ADDR是<code>0x1</code>；每个LAN8720都有一个复位引脚，ENET1是<code>SNVS_TAMPER8</code>。</p><p>LAN8720驱动，因为所有的PHY芯片的前16个寄存器一模一样，因此uboot里面已经写好了通用PHY驱动，所以理论上不需要修改。</p></li></ol><ul><li>修改<code>mx6ull_myboard_emmc.h</code>文件中的<code>PHY ADDR</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CONFIG_FEC_ENET_DEV == 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMX_FEC_BASEENET_BASE_ADDR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_MXC_PHYADDR          0x0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_XCV_TYPE             RMII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (CONFIG_FEC_ENET_DEV == 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMX_FEC_BASEENET2_BASE_ADDR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_MXC_PHYADDR0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_XCV_TYPERMII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>删除原有的74LV595的驱动代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_SDI IMX_GPIO_NR(5, 10)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_STCP IMX_GPIO_NR(5, 7)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_SHCP IMX_GPIO_NR(5, 11)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_OE IMX_GPIO_NR(5, 8)</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENET1_RESET IMX_GPIO_NR(5, 7)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENET2_RESET IMX_GPIO_NR(5, 8)</span></span><br></pre></td></tr></table></figure><p>然后删除和74LV595有关的代码，添加ALPHA开发板驱动代码。</p><p>分别在<code>mx6ull_myboard_emmc.c</code>中的<code>fec1_pads[]</code> 和<code>fec2_pads[]</code>中添加以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fec1_pads[]</span></span><br><span class="line">MX6_PAD_SNVS_TAMPER7__GPIO5_IO07 | MUX_PAD_CTRL(NO_PAD_CTRL),</span><br><span class="line"></span><br><span class="line"><span class="comment">//fec2_pads[]</span></span><br><span class="line">MX6_PAD_SNVS_TAMPER8__GPIO5_IO08 | MUX_PAD_CTRL(NO_PAD_CTRL),</span><br></pre></td></tr></table></figure><p>修改<code>setup_iomux_fec(int fec_id)</code>函数为以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup_iomux_fec</span><span class="params">(<span class="keyword">int</span> fec_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fec_id == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">imx_iomux_v3_setup_multiple_pads(fec1_pads, ARRAY_SIZE(fec1_pads));</span><br><span class="line"><span class="comment">// 添加ENET1_RESET复位代码</span></span><br><span class="line">gpio_direction_output(ENET1_RESET, <span class="number">1</span>);</span><br><span class="line">gpio_set_value(ENET1_RESET, <span class="number">0</span>);</span><br><span class="line">mdelay(<span class="number">20</span>);</span><br><span class="line">gpio_set_value(ENET1_RESET, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">imx_iomux_v3_setup_multiple_pads(fec2_pads, ARRAY_SIZE(fec2_pads));</span><br><span class="line"><span class="comment">// 添加ENET2_RESET复位代码</span></span><br><span class="line">gpio_direction_output(ENET2_RESET, <span class="number">1</span>);</span><br><span class="line">gpio_set_value(ENET2_RESET, <span class="number">0</span>);</span><br><span class="line">mdelay(<span class="number">20</span>);</span><br><span class="line">gpio_set_value(ENET2_RESET, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>int genphy_update_link(struct phy_device *phydev)</code>中的最上面添加以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PHY_SMSC<span class="comment">// CONFIG_PHY_SMSC 需要在 mx6ull_myboard_emmc.h 中定义</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> lan8720_flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bmcr_reg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (lan8720_flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">bmcr_reg = phy_read(phydev, MDIO_DEVAD_NONE, MII_BMCR);</span><br><span class="line">phy_write(phydev, MDIO_DEVAD_NONE, MII_BMCR, BMCR_RESET);</span><br><span class="line"><span class="keyword">while</span> (phy_read(phydev, MDIO_DEVAD_NONE, MII_BMCR) &amp; <span class="number">0X8000</span>)</span><br><span class="line">&#123;</span><br><span class="line">udelay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">phy_write(phydev, MDIO_DEVAD_NONE, MII_BMCR, bmcr_reg);</span><br><span class="line">lan8720_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="2-Uboot命令"><a href="#2-Uboot命令" class="headerlink" title="2. Uboot命令"></a>2. Uboot命令</h2><table><thead><tr><th>命令</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>md</td><td>md[.b, .w, .l] address [# of objects]</td><td>用于显示内存值</td></tr><tr><td>nm</td><td>nm [.b, .w, .l] address</td><td>用于修改指定地址的值，q退出</td></tr><tr><td>mm</td><td>mm [.b, .w, .l] address</td><td>如上，地址会自增</td></tr><tr><td>cp</td><td>cp [.b, .w, .l] source target count</td><td>数据拷贝命令，用于将 DRAM 中的数据从一段内存拷贝到另一段内存中，或者把 Nor Flash 中的数据拷贝到 DRAM 中</td></tr><tr><td>mmc</td><td>mmc 是一系列的命令。？mmc 查询</td><td>uboot 支持 EMMC 和 SD 卡，因此也要提供 EMMC 和 SD 卡的操作命令。一般认为 EMMC 和 SD 卡是同一个东西。</td></tr><tr><td>fatinfo</td><td>fatinfo &lt;interface&gt; [&lt;dev[:part]&gt;]</td><td>查询指定 MMC 设置指定分区的文件系统信息,例如<code>fatinfo mmc 1:1</code></td></tr><tr><td>fatls</td><td>fatls &lt;interface&gt; [&lt;dev[:part]&gt;] [directory]</td><td>用于查询 FAT 格式设备的目录和文件信息，如<code>fatls mmc 1:1</code>，查询 EMMC 分区 1 中的所有的目录和文件。</td></tr><tr><td>fstype</td><td>fstype &lt;interface&gt; &lt;dev&gt;:&lt;part&gt;</td><td>查看 MMC 设备某个分区的文件系统格式，如<code>fstype mmc 1:0</code></td></tr><tr><td>fatload</td><td>fatload &lt;interface&gt; [&lt;dev[:part]&gt; [&lt;addr&gt; [&lt;filename&gt; [bytes [pos]]]]]</td><td>用于将指定的文件读取到 DRAM 中，如<code>fatload mmc 1:1 80800000 zImage</code></td></tr><tr><td>bootz</td><td>bootz [addr [initrd[:size]] [fdt]]</td><td>引导[启动]Linux(zImage)，如<code>bootz 80800000 – 83000000</code>，80800000存放着Linux内核，83000000是设备树，不使用initrd时，使用－代替</td></tr><tr><td>go</td><td>go addr [arg …]</td><td>用于跳到指定的地址处执行应用，如<code>tftp 87800000 printf.bin</code> <code>go 87800000</code></td></tr></tbody></table><h2 id="3-Uboot-图形化配置方法"><a href="#3-Uboot-图形化配置方法" class="headerlink" title="3. Uboot 图形化配置方法"></a>3. Uboot 图形化配置方法</h2><ol><li><p>通过终端配置</p></li><li><p>首先进入到uboot的源码路径下</p></li><li><p>然后使用默认配置 <code>make mx6ull_myboard_emmc_defconfig</code> 进行默认配置</p></li><li><p>输入<code>make menuconfig</code> 打开图形化界面。<strong>注意：</strong>如果出现错误，需要安装<code>ncurses</code>库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install libncurses5</span><br><span class="line">sudo apt install libncurses5-dev</span><br></pre></td></tr></table></figure></li><li><p>图形化配置界面对于一个功能的编译或者叫做选择有三种模式。</p><ul><li>Y：对应的功能编译到uboot里面。</li><li>N：对应的功能不编译到uboot里面。</li><li>M：将对应的功能编译成模块，linux内常用，uboot不支持。</li></ul></li><li><p>当我们配置好后，因为只是写入到<code>.config</code>文件中，清理工程后会丢失，因此需要保存自己的配置文件。在图形配置界面，选择<code>save</code>选项来保存，使用<code>load</code>选项来加载配置文件。</p></li></ol>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(四)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B.html</id>
    <published>2020-09-18T15:00:50.000Z</published>
    <updated>2020-09-18T15:24:11.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。推荐看《跟我一起写Makefile》</p><h2 id="Makefile中变量的使用"><a href="#Makefile中变量的使用" class="headerlink" title="Makefile中变量的使用"></a>Makefile中变量的使用</h2><p>变量在声明时需要给予初值，而在使用时，需要给在变量名前加上”<code>$</code>“符号，但最好<br>用小括号“<code>（）</code>”或是大括号“<code>{}</code>”把变量给包括起来。如果你要使用真实的“<code>$</code>”字符，<br>那么你需要用“<code>$$</code>”来表示。</p><a id="more"></a><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符:="></a>操作符<code>:=</code></h3><p>为了防止“<code>=</code>”在变量中使用变量会造成无限的变量展开，比如下面这种情况</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = $&#123;B&#125;</span><br><span class="line">B = $&#123;A&#125;</span><br></pre></td></tr></table></figure><p>所以常用<code>:=</code>操作符来定义变量。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x := foo</span><br><span class="line">y := $&#123;x&#125; bar</span><br><span class="line">x := later</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">y := foo bar</span><br><span class="line">x := later</span><br></pre></td></tr></table></figure><p>这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变<br>量。 比如</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y := $&#123;x&#125; bar</span><br><span class="line">x := foo</span><br></pre></td></tr></table></figure><p>那么<code>y</code>的值是<code>bar</code>，而不是<code>foo bar</code></p><h3 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符?="></a>操作符<code>?=</code></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOO ?= bar</span><br></pre></td></tr></table></figure><p>其含义是，如果<code>FOO</code>没有被定义过，那么变量<code>FOO</code>的值就是<code>bar</code>，否则，这条语句什么也不做，相当于</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">origin</span> FOO)</span>, undefined)</span><br><span class="line">FOO = bar</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h2 id="Makefile练手"><a href="#Makefile练手" class="headerlink" title="Makefile练手"></a>Makefile练手</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的交叉编译器</span></span><br><span class="line">CROSS_COMPILER ?= arm-linux-gnueabihf-</span><br><span class="line">CC := <span class="variable">$(CROSS_COMPILER)</span>gcc</span><br><span class="line">LD := <span class="variable">$(CROSS_COMPILER)</span>ld</span><br><span class="line">OBJCOPY := <span class="variable">$(CROSS_COMPILER)</span>objcopy</span><br><span class="line">OBJDUMP := <span class="variable">$(CROSS_COMPILER)</span>objdump</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接生成的文件名</span></span><br><span class="line">TARGET := led</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make查找路径</span></span><br><span class="line">VPATH :=project \</span><br><span class="line">imx6ul \</span><br><span class="line">bsp/led \</span><br><span class="line">bsp/clk \</span><br><span class="line">bsp/delay \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程所有.C .S .H 文件所在路径</span></span><br><span class="line">INCLUDEDIRS := project \</span><br><span class="line">imx6ul \</span><br><span class="line">bsp/led \</span><br><span class="line">bsp/clk \</span><br><span class="line">bsp/delay \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给路径加上 -I 参数，因为编译时需要对路径需要使用 -I 选项</span></span><br><span class="line">INCLUDES :=<span class="variable">$(<span class="built_in">patsubst</span> %, -I %, <span class="variable">$(INCLUDEDIRS)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找工程下所有的 .s .c 文件，包含路径</span></span><br><span class="line">SFILES := <span class="variable">$(<span class="built_in">foreach</span> <span class="built_in">dir</span>, <span class="variable">$(INCLUDEDIRS)</span>, $(<span class="built_in">wildcard</span> <span class="variable">$(dir)</span>/*.s)</span>)</span><br><span class="line">CFILES := <span class="variable">$(<span class="built_in">foreach</span> <span class="built_in">dir</span>, <span class="variable">$(INCLUDEDIRS)</span>, $(<span class="built_in">wildcard</span> <span class="variable">$(dir)</span>/*.c)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的 .s .c 文件 去掉前面的路径</span></span><br><span class="line">SFILESNODIR:= <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(SFILES)</span>)</span></span><br><span class="line">CFILESNODIR:= <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(CFILES)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有的 .s .c 文件的文件名，将其后缀名改为 .o ,并添加 obj/ 前缀,这样编译生成的.o文件就会放置到 obj文件夹下</span></span><br><span class="line">SOBJS:= <span class="variable">$(<span class="built_in">addprefix</span> obj/, $(SFILESNODIR:.s=.o)</span>)</span><br><span class="line">COBJS:= <span class="variable">$(<span class="built_in">addprefix</span> obj/, $(CFILESNODIR:.c=.o)</span>)</span><br><span class="line"></span><br><span class="line">OBJS :=  <span class="variable">$(SOBJS)</span> <span class="variable">$(COBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>.bin:<span class="variable">$(OBJS)</span></span><br><span class="line"><span class="variable">$(LD)</span> -T imx6ul.lds -o <span class="variable">$(TARGET)</span>.elf <span class="variable">$^</span></span><br><span class="line"><span class="variable">$(OBJCOPY)</span> -O binary -S -g <span class="variable">$(TARGET)</span>.elf <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(OBJDUMP)</span> -D -m arm <span class="variable">$(TARGET)</span>.elf &gt; <span class="variable">$(TARGET)</span>.dis</span><br><span class="line"></span><br><span class="line"><span class="comment"># SOBJS中所有匹配 obj/%.o 的文件名 所对应的依赖 %.s</span></span><br><span class="line"><span class="variable">$(SOBJS)</span> : obj/%.o : %.s</span><br><span class="line"><span class="variable">$(CC)</span> -c -O2 <span class="variable">$(INCLUDES)</span> -o <span class="variable">$@</span> <span class="variable">$&lt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># COBJS中所有匹配 obj/%.o 的文件名 所对应的依赖 %.c</span></span><br><span class="line"><span class="variable">$(COBJS)</span> : obj/%.o : %.c</span><br><span class="line"><span class="variable">$(CC)</span> -c -O2 <span class="variable">$(INCLUDES)</span> -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf obj/*.o <span class="variable">$(TARGET)</span>.bin <span class="variable">$(TARGET)</span>.elf <span class="variable">$(TARGET)</span>.dis load.imx</span><br><span class="line"></span><br><span class="line">.PHONY : printf</span><br><span class="line"><span class="section">printf:</span></span><br><span class="line">@echo INCLUDES=<span class="variable">$(INCLUDES)</span></span><br><span class="line">@echo SFILES=<span class="variable">$(SFILES)</span></span><br><span class="line">@echo CFILES=<span class="variable">$(CFILES)</span></span><br><span class="line">@echo SFILESNODIR=<span class="variable">$(SFILESNODIR)</span></span><br><span class="line">@echo CFILESNODIR=<span class="variable">$(CFILESNODIR)</span></span><br><span class="line">@echo SOBJS=<span class="variable">$(SOBJS)</span></span><br><span class="line">@echo COBJS=<span class="variable">$(COBJS)</span></span><br><span class="line">@echo OBJS=<span class="variable">$(OBJS)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(三)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89.html</id>
    <published>2020-09-18T14:58:51.000Z</published>
    <updated>2020-09-18T15:06:52.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="链接脚本"><a href="#链接脚本" class="headerlink" title="链接脚本"></a>链接脚本</h2><p>链接脚本的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">. &#x3D; 0X87800000;</span><br><span class="line">.text :</span><br><span class="line">&#123;</span><br><span class="line">start.o</span><br><span class="line">main.o</span><br><span class="line">*(.text)</span><br><span class="line">&#125;</span><br><span class="line">.rodata ALIGN(4) : &#123;*(.rodata)&#125;</span><br><span class="line">.data ALIGN(4) : &#123;*(.data)&#125;</span><br><span class="line">__bss_start &#x3D; .;</span><br><span class="line">.bss ALIGN(4) : &#123;*(.bss) *(.COMMON)&#125;</span><br><span class="line">__bss_end &#x3D; .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="加上清除BSS段，代码不运行"><a href="#加上清除BSS段，代码不运行" class="headerlink" title="加上清除BSS段，代码不运行"></a>加上清除BSS段，代码不运行</h2><p>__bss_start = 0X87800289 。对于32位的SOC来说，一般访问是4字节访问的。0X0，0X4，0X8，0XC。芯片处理的时候以4字节访问，因此会从0X87800288开始清除BSS段。然而0X87800288不属于BSS段。所以我们需要对__bss_start进行四字节对齐。按照四字节对齐的原理，__bss_start = 0X8780028C。所以需要设置__bss_start为四字节对齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS </span><br><span class="line">&#123;</span><br><span class="line">    . &#x3D; 0x87800000;</span><br><span class="line">    .text : </span><br><span class="line">    &#123;</span><br><span class="line">        obj&#x2F;start.o;</span><br><span class="line">        *(.text);</span><br><span class="line">    &#125;</span><br><span class="line">    .rodata ALIGN(4) : &#123;*(.rodata)&#125;</span><br><span class="line">    .data ALIGN(4) : &#123;*(.data)&#125;</span><br><span class="line">    . &#x3D; ALIGN(4);</span><br><span class="line">    __bss_start &#x3D; .;</span><br><span class="line">    .bss ALIGN(4) : &#123;*(.bss) *(COMMON)&#125;</span><br><span class="line">    __bss_end &#x3D; .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(二)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C.html</id>
    <published>2020-09-18T14:50:13.000Z</published>
    <updated>2020-09-18T15:07:15.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6ULL裸机开发学习"><a href="#IMX6ULL裸机开发学习" class="headerlink" title="IMX6ULL裸机开发学习"></a>IMX6ULL裸机开发学习</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="C语言运行环境构建"><a href="#C语言运行环境构建" class="headerlink" title="C语言运行环境构建"></a>C语言运行环境构建</h2><ol><li><p>设置处理器模式</p><p>设置6ULL处于SVC模式下，设置CPSR寄存器的bit4-0，就是M[4:0]为10011=0X13，读写状态寄存器需要用MRS和MSR指令，</p></li></ol><a id="more"></a><ol start="2"><li><p>设置sp指针</p><p><code>sp</code>可以指向内部RAM，也可以指向DDR，我们将其指向DDR。512MB的范围 0X80000000～0X9FFFFFFF。栈大小设置为 0X200000=2MB。处理器栈增长模式，A7是向下增长的。设置SP=0X80200000</p></li><li><p>跳转到C语言</p><p>使用b指令，跳转到C语言函数，比如跳转到main函数。</p></li></ol><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.global _start&#x2F;* 全局标号 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 描述： _start函数，程序从此函数开始执行，主要是完成C语言运行环境设置</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">_start:</span><br><span class="line">@ 设置处理器进入SVC模式</span><br><span class="line">mrs r0, cpsr</span><br><span class="line">bic r0, r0, #0x1f@ 将r0的低五位清零，也就是M[4:0]</span><br><span class="line">orr r0, r0, #0x13@ r0或上0x13 表示使用SVC模式</span><br><span class="line">msr cpsr, r0@ 将r0中的数据写入到cpsr寄存器中</span><br><span class="line"></span><br><span class="line">ldr sp, &#x3D;0x80200000@ 设置栈指针</span><br><span class="line">b main@ 跳转到main函数运行</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>IMX6ULL学习笔记(一)</title>
    <link href="https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80.html"/>
    <id>https://proudrabbit.gitee.io/IMX6ULL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80.html</id>
    <published>2020-09-18T14:40:41.000Z</published>
    <updated>2020-09-18T15:08:20.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IMX6UL裸机开发bin文件头部信息分析"><a href="#IMX6UL裸机开发bin文件头部信息分析" class="headerlink" title="IMX6UL裸机开发bin文件头部信息分析"></a>IMX6UL裸机开发bin文件头部信息分析</h1><p>以下内容是我在学习正点原子<code>IMX6ULL</code>开发板<code>alpha</code>中记录的笔记，部分摘录自正点原子<code>IMX6ULL开发手册</code>。</p><h2 id="IVT、Boot-Data和DCD数据"><a href="#IVT、Boot-Data和DCD数据" class="headerlink" title="IVT、Boot Data和DCD数据"></a>IVT、Boot Data和DCD数据</h2><p>Bin文件前面要添加头部（IVT+Boot Data+DCD数据），由官方手册可知要烧写到SD卡中的load.imx文件在SD卡中的起始地址是0x400，也就是1024.</p><p>头部大小是3KB，加上偏移的1KB，一共是4KB，因此在SD卡中bin文件起始地址为4096。IVT大小为32B/4=8条。</p><a id="more"></a><p>IVT数据格式：</p><table><thead><tr><th>IVT结构</th><th>数据</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>0X402000D1</td><td>IVT头部信息</td></tr><tr><td>entry</td><td>0X87800000</td><td>保存着程序入口地址，也就是镜像第一行指令所在的位置</td></tr><tr><td>reserved1</td><td>0X00000000</td><td>保留，未使用</td></tr><tr><td>dcd</td><td>0x877FF42C</td><td>保存着DCD数据的起始地址，0X87800000-0XC00(IVT+Boot Data+DCD=3KB)=0X877FF400(load.imx起始地址)，所以DCD相对于load.imx起始地址偏移了0X2C（44Byte,IVT=32Byte,Boot Bata=12Byte）</td></tr><tr><td>boot data</td><td>0X877FF420</td><td>保存着Boot数据起始地址，IVT=32Byte，0X877FF400+0X20（32Byte）=0X877FF420</td></tr><tr><td>self</td><td>0X877FF400</td><td>IVT复制到DDR中以后的首地址</td></tr><tr><td>csf</td><td>0X00000000</td><td>CSF地址</td></tr><tr><td>reserved2</td><td>0X00000000</td><td>保留，未使用</td></tr></tbody></table><p>Boot Data数据格式：</p><table><thead><tr><th>Boot Data结构</th><th>数据</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>0X877FF000</td><td>整个load.imx的起始地址，包括前面的1KByte地址偏移</td></tr><tr><td>length</td><td>0X00200000</td><td>镜像大小，这里设置2MByte。因此镜像大小不能超过2MByte</td></tr><tr><td>plugin</td><td>0X00000000</td><td>插件</td></tr></tbody></table><p>DCD数据格式：</p><table><thead><tr><th>Header （Tag+Length+Version）</th></tr></thead><tbody><tr><td>[CMD]</td></tr><tr><td>[CMD]</td></tr><tr><td>……</td></tr></tbody></table><p>DCD CMD数据格式：</p><table><thead><tr><th align="center">Header （Tag+Length+Parameter）</th></tr></thead><tbody><tr><td align="center">Address</td></tr><tr><td align="center">Value/Mask</td></tr><tr><td align="center">[Address]</td></tr><tr><td align="center">[Value/Mask]</td></tr><tr><td align="center">……</td></tr><tr><td align="center">[Address]</td></tr><tr><td align="center">[Value/Mask]</td></tr></tbody></table><p>DCD数据整体举例：</p><table><thead><tr><th>DCD结构</th><th>数据</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>0X40E801D2</td><td>header 格式,第一个字节 Tag 为 0XD2,第二和三这两个字节为 DCD 大小,为大端模式,所以 DCD 大小为 0X01E8=488 字节。第四个字节为 0X40。</td></tr><tr><td>Write Data Command</td><td>0X04E401CC</td><td>第一个为 Tag,固定为 0XCC,第二和三这两个字节是大端模式的命令总长度,为 0X01E4=484 个字节。第四个字节是 Parameter,为 0X04,表示目标位置宽度为 4 个字节。</td></tr><tr><td>Address</td><td>0X020C4068</td><td>寄存器 CCGR0 地址</td></tr><tr><td>Value</td><td>0XFFFFFFFF</td><td>要写入寄存器 CCGR0 的值,表示打开 CCGR0 控制的所有外设时钟。</td></tr><tr><td>……</td><td>……</td><td>CCGR1~CCGR5 这些寄存器的地址和值。</td></tr><tr><td>IVT、Boot Data和DCD数据Address</td><td>0X020C4080</td><td>寄存器 CCGR0 地址</td></tr><tr><td>Bin文件前面要添加头部（IVT+Boot Data+DCD数据），由官方手册可知要烧写到SD卡中的load.imx文件在SD卡中的起始地址是0x400，也就是1024. Value</td><td>0XFFFFFFFF</td><td>要写入寄存器 CCGR6 的值,表示打开 CCGR6 控制的所有外设时钟。</td></tr><tr><td>头部大小是3KB，加上偏移的1KB，一共是4KB，因此在SD卡中bin文件起始地址为4096。IVT大小为32B/4=8条。……</td><td>……</td><td>……</td></tr><tr><td>IVT数据格式： Check Data Command</td><td>……</td><td>……</td></tr><tr><td>IVT结构</td><td>数据……</td><td>描述……</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      正点原子alpha开发板IMX6ULL裸机开发学习笔记。
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IMX6ULL" scheme="https://proudrabbit.gitee.io/tags/IMX6ULL/"/>
    
  </entry>
  
  <entry>
    <title>C语言函数指针</title>
    <link href="https://proudrabbit.gitee.io/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88.html"/>
    <id>https://proudrabbit.gitee.io/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88.html</id>
    <published>2020-09-18T14:37:12.000Z</published>
    <updated>2020-09-18T14:39:27.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言函数指针用法"><a href="#C语言函数指针用法" class="headerlink" title="C语言函数指针用法"></a>C语言函数指针用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义中断处理函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*system_Irq_Handler_t)</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> gicciar, <span class="keyword">void</span> *param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 定义一种新的变量类型，类型名 *system_Irq_Handler_t 因此用这个类型定义的变量是一个指针</span></span><br><span class="line"><span class="comment"> * 这种指针可以指向 void function(unsigned int gicciar, void *param) 这种类型的函数</span></span><br><span class="line"><span class="comment"> * 常用在函数数组中，这样可以通过函数数组来直接调用函数。</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      遇到的一种函数指针的用法。
    
    </summary>
    
    
    
      <category term="函数指针" scheme="https://proudrabbit.gitee.io/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>串口输出中文乱码</title>
    <link href="https://proudrabbit.gitee.io/%E4%B8%B2%E5%8F%A3%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.html"/>
    <id>https://proudrabbit.gitee.io/%E4%B8%B2%E5%8F%A3%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.html</id>
    <published>2020-07-29T07:38:56.000Z</published>
    <updated>2020-07-29T09:00:47.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="串口输出中文乱码"><a href="#串口输出中文乱码" class="headerlink" title="串口输出中文乱码"></a>串口输出中文乱码</h1><h2 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h2><p>最近在使用<code>OpenMV</code>，但是由于没有转接板和软排线来连接串口，不过手上有一块<code>STM32F4</code>的开发板，于是就想到将其作为一个转接，通过其接收<code>OpenMV</code>发送的数据，并将其转发到电脑上，结果串口助手一直输出乱码。</p><a id="more"></a><h2 id="寻找问题产生的原因"><a href="#寻找问题产生的原因" class="headerlink" title="寻找问题产生的原因"></a>寻找问题产生的原因</h2><p>一开始以为是自己波特率设置的有问题，但是查验后并不是，<code>PC</code>，<code>OpenMV</code>，<code>STM32</code>之间设置的波特率都是对应的。然后又以为是自己改过<code>STM32F4</code>的时钟频率，然后开始查<code>STM32</code>时钟频率的设置，发现也没问题。怎么也找不到问题在哪。/(ㄒoㄒ)/~~</p><p>后来突然想到<code>OpenMV</code>是使用<code>MicorPython</code>语言写的，一般的字符编码为<code>UTF-8</code>，而<code>STM32</code>用的是<code>keil</code>的IDE开发的，编码格式一般为<code>ASNII</code>，两个字符编码不一样也会导致乱码，于是将其都改为<code>UTF-8</code>编码，结果乱码依旧。。。 (╯‵□′)╯︵┻━┻</p><p>为了继续查找问题所在，先是将<code>OpenMV</code>发送给<code>STM32</code>数据直接返回<code>OpenMV</code>结果正确，然后将串口助手发送给<code>STM32</code>的数据直接返回，结果正确。由此可以看出，串口助手和<code>OpenMV</code>的字符编码不一致导致的乱码。这里给出一个网址，可以在线转换乱码。<a href="http://www.mytju.com/classCode/tools/messyCodeRecover.asp" target="_blank" rel="noopener">乱码恢复</a> 。从中我们可以看到，前后的编码不一致。</p><p><img src="https://i.loli.net/2020/07/29/i1PsQfEOqGkrheC.png" alt="image-20200729163715363"></p><p><strong>至此，找到了问题所在，串口助手不支持<code>UTF-8</code>编码。</strong>(￣_￣|||)</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>既然串口助手不支持，那就找支持的串口助手，或者自己开发一个(暂时有点想法)。目前使用的星瞳串口助手，接收结果如下：</p><img src="https://i.loli.net/2020/07/29/daebr3jPEMRShIv.png" alt="结果" style="zoom:67%"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>串口助手显示中文乱码的原因有以下几点：</p><ol><li>波特率不对应。</li><li>字符编码不对应。</li><li>串口助手不支持字符编码方式。</li></ol><h2 id="下面推荐两个串口助手："><a href="#下面推荐两个串口助手：" class="headerlink" title="下面推荐两个串口助手："></a>下面推荐两个串口助手：</h2><ol><li><a href="https://singtown.com/singtownserialport/" target="_blank" rel="noopener">星瞳串口助手SingTownSerialport</a>（支持Mac，Windows，Ubuntu）</li></ol><img src="https://cdn.singtown.com/2018/09/singtown-serialport-snapshot.png" alt="img" style="zoom:33%"><ol start="2"><li><a href="[https://www.microsoft.com/zh-cn/p/%e4%b8%b2%e5%8f%a3%e8%b0%83%e8%af%95%e5%8a%a9%e6%89%8b/9nblggh43hdm?rtc=1#activetab=pivot:overviewtab](https://www.microsoft.com/zh-cn/p/串口调试助手/9nblggh43hdm?rtc=1#activetab=pivot:overviewtab)">串口调试助手</a>（Windows）</li></ol><p><img src="https://pic4.zhimg.com/80/v2-b2105cb1777a1c72c83d2bcf287a2ef7_720w.jpg" alt="串口调试助手"></p>]]></content>
    
    <summary type="html">
    
      记录下自己遇到的串口输出一直乱码的问题。
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="BUG" scheme="https://proudrabbit.gitee.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="https://proudrabbit.gitee.io/%E9%80%92%E5%BD%92.html"/>
    <id>https://proudrabbit.gitee.io/%E9%80%92%E5%BD%92.html</id>
    <published>2020-07-14T13:06:56.000Z</published>
    <updated>2020-07-14T14:31:08.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是递归"><a href="#1-什么是递归" class="headerlink" title="1. 什么是递归"></a>1. 什么是递归</h1><p>简单来说就是，当函数自己调用自己本身时，就会发生递归现象。</p><p>举例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_number</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    使用递归来实现 1+2+3……+n</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: 求和的结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    temp = sum_number(n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> n+temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">"请输入你要计算的数字："</span>))</span><br><span class="line">    print(sum_number(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行结果如下：</p><p><img src="https://i.loli.net/2020/07/14/8YKvtmljHLhk4c7.png" alt="程序运行结果" title="结果图"></p><h1 id="2-递归流程分析"><a href="#2-递归流程分析" class="headerlink" title="2. 递归流程分析"></a>2. 递归流程分析</h1><p><img src="https://i.loli.net/2020/07/14/uUfl1YB4adniTPE.png" alt="递归流程" title="递归流程"></p><p><strong>注意事项：在使用递归时，一定要给递归一个出口，不然程序会进入死循环。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是递归&quot;&gt;&lt;a href=&quot;#1-什么是递归&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是递归&quot;&gt;&lt;/a&gt;1. 什么是递归&lt;/h1&gt;&lt;p&gt;简单来说就是，当函数自己调用自己本身时，就会发生递归现象。&lt;/p&gt;&lt;p&gt;举例如下：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum_number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    使用递归来实现 1+2+3……+n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    :param n:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    :return: 求和的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    temp = sum_number(n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n+temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = int(input(&lt;span class=&quot;string&quot;&gt;&quot;请输入你要计算的数字：&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(sum_number(num))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__==&lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://proudrabbit.gitee.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="递归" scheme="https://proudrabbit.gitee.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm的配置文件所在路径</title>
    <link href="https://proudrabbit.gitee.io/PyCharm%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84.html"/>
    <id>https://proudrabbit.gitee.io/PyCharm%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84.html</id>
    <published>2020-07-04T03:56:00.000Z</published>
    <updated>2020-07-04T04:01:56.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyCharm的配置文件所在路径"><a href="#PyCharm的配置文件所在路径" class="headerlink" title="PyCharm的配置文件所在路径"></a>PyCharm的配置文件所在路径</h1><p>因为一些原因要修改PyCharm的配置，结果找不到配置文件在哪，翻了好久才找到，因此记录下，防止忘记。</p><hr><p>Ubuntu应用商店安装PyCharmCE后，配置文件所在路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;.config&#x2F;JetBrains&#x2F;PyCharmCE2020.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Ubuntu下PyCharm的配置文件所在路径。
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Linux" scheme="https://proudrabbit.gitee.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IIC通讯协议</title>
    <link href="https://proudrabbit.gitee.io/IIC%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.html"/>
    <id>https://proudrabbit.gitee.io/IIC%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE.html</id>
    <published>2020-07-03T04:48:10.000Z</published>
    <updated>2020-09-18T14:31:45.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IIC通讯协议"><a href="#IIC通讯协议" class="headerlink" title="IIC通讯协议"></a>IIC通讯协议</h1><p>简单介绍下<code>IIC</code>的通讯时序，然后给出51单片机实现的代码。</p><a id="more"></a><h1 id="1-通讯协议"><a href="#1-通讯协议" class="headerlink" title="1. 通讯协议"></a>1. 通讯协议</h1><p><code>IIC</code>总线在传送数据过程中有三种类型信号，分别是：开始信号、结束信号和应答信号。</p><ul><li>开始信号：<code>SCL</code>为高电平时，<code>SDA</code>由高电平向低电平跳变，开始传送数据。</li><li>结束信号：<code>SCL</code>为高电平时，<code>SDA</code>由低电平向高电平跳变，结束传送数据。</li><li>应答信号：接收数据的<code>IC</code>在接收到<code>8bit</code>数据后，向发送数据的<code>IC</code>发出特定的低电平脉冲，表示已收到数据。<code>CPU</code>向受控单元发出一个信号后，等待受控单元发出一个应答信号，<code>CPU</code>接收到应答信号后，根据实际情况做出是否继续传递信号的判断。若未接收到应答信号，则判断为受控单元出现故障。</li></ul><p><code>IIC</code>总线时序图片如下。</p><p><img src="https://i.loli.net/2020/07/03/sLBifAI9etqoDcu.png" alt="IIC总线时序图"></p><h1 id="2-51单片机程序代码"><a href="#2-51单片机程序代码" class="headerlink" title="2. 51单片机程序代码"></a>2. 51单片机程序代码</h1><h2 id="2-1-使用的IO口"><a href="#2-1-使用的IO口" class="headerlink" title="2.1 使用的IO口"></a>2.1 使用的IO口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---定义IIC接口---//</span></span><br><span class="line">sbit IIC_SCL = P2^<span class="number">1</span>;</span><br><span class="line">sbit IIC_SDA = P2^<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="2-2-延时函数"><a href="#2-2-延时函数" class="headerlink" title="2.2 延时函数"></a>2.2 延时函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment">延时4微秒(STC89C51，晶振频率12MHz)</span></span><br><span class="line"><span class="comment">不同的单片机,需要调整此函数</span></span><br><span class="line"><span class="comment">**************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_4us</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-IIC驱动代码"><a href="#2-3-IIC驱动代码" class="headerlink" title="2.3 IIC驱动代码"></a>2.3 IIC驱动代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名      : IIC_Start</span></span><br><span class="line"><span class="comment">* 功能: IIC启动信号</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Stop</span></span><br><span class="line"><span class="comment">* 功能: IIC停止信号</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_WaitAck</span></span><br><span class="line"><span class="comment">* 功能: 等待Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: BYTE 1接收应答失败 0接收应答成功</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function">BYTE <span class="title">IIC_WaitAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE errtime = <span class="number">0</span>;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (IIC_SDA)</span><br><span class="line">&#123;</span><br><span class="line">errtime++;</span><br><span class="line"><span class="keyword">if</span>(errtime&gt;<span class="number">250</span>)</span><br><span class="line">&#123;</span><br><span class="line">IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Ack</span></span><br><span class="line"><span class="comment">* 功能: 产生Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_nAck</span></span><br><span class="line"><span class="comment">* 功能: 不产生Ack应答</span></span><br><span class="line"><span class="comment">* 输入: 无</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_nAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Send_Byte</span></span><br><span class="line"><span class="comment">* 功能: 发送一个字节</span></span><br><span class="line"><span class="comment">* 输入: BYTE dat</span></span><br><span class="line"><span class="comment">* 输出: 无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Send_Byte</span><span class="params">(BYTE dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE t = <span class="number">0</span>;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SDA = ((dat&amp;<span class="number">0x80</span>)&gt;&gt;<span class="number">7</span>);</span><br><span class="line">dat &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">_nop_();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* 函数名   : IIC_Read_Byte</span></span><br><span class="line"><span class="comment">* 功能: 读取一个字节</span></span><br><span class="line"><span class="comment">* 输入: BYTE ack 1为发送ACK 0为发送nACK</span></span><br><span class="line"><span class="comment">* 输出: BYTE</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function">BYTE <span class="title">IIC_Read_Byte</span><span class="params">(BYTE ack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE i,receive = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay_4us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">receive &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(IIC_SDA==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">receive++;</span><br><span class="line">&#125;</span><br><span class="line">Delay_4us();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ack)</span><br><span class="line">&#123;</span><br><span class="line">IIC_Ack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_nAck();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> receive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IIC通讯协议&quot;&gt;&lt;a href=&quot;#IIC通讯协议&quot; class=&quot;headerlink&quot; title=&quot;IIC通讯协议&quot;&gt;&lt;/a&gt;IIC通讯协议&lt;/h1&gt;&lt;p&gt;简单介绍下&lt;code&gt;IIC&lt;/code&gt;的通讯时序，然后给出51单片机实现的代码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="嵌入式" scheme="https://proudrabbit.gitee.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="IIC" scheme="https://proudrabbit.gitee.io/tags/IIC/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH连接电脑</title>
    <link href="https://proudrabbit.gitee.io/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.html"/>
    <id>https://proudrabbit.gitee.io/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.html</id>
    <published>2020-07-02T04:10:02.000Z</published>
    <updated>2020-09-18T14:32:14.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用SSH来远程连接电脑"><a href="#如何使用SSH来远程连接电脑" class="headerlink" title="如何使用SSH来远程连接电脑"></a>如何使用SSH来远程连接电脑</h1><p>本篇文章主要是描述如何使用<code>SSH</code>来远程连接<code>Linux</code>主机（Ubuntu）的用户，也适用于其他的Linux发行版。</p><a id="more"></a><h2 id="1-客户端安装SSH"><a href="#1-客户端安装SSH" class="headerlink" title="1. 客户端安装SSH"></a>1. 客户端安装SSH</h2><h3 id="1-1-Ubuntu"><a href="#1-1-Ubuntu" class="headerlink" title="1.1 Ubuntu"></a>1.1 Ubuntu</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install SSH</span><br></pre></td></tr></table></figure><h3 id="1-2-Windows"><a href="#1-2-Windows" class="headerlink" title="1.2 Windows"></a>1.2 Windows</h3><p>Windows 10 1809默认安装了<code>OpenSSH</code>，无需安装。</p><h2 id="2-服务器安装SSH-server"><a href="#2-服务器安装SSH-server" class="headerlink" title="2. 服务器安装SSH-server"></a>2. 服务器安装SSH-server</h2><p>由于安装方式和第一步一样，这里就之列出<code>Ubuntu</code>下的安装方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install SSH-server</span><br></pre></td></tr></table></figure><p><strong>PS：到这里已经可以连接了，下面是使用SSH免密登录，可以使用 <code>Ssh 用户名@服务器地址</code> 来连接服务器</strong></p><h2 id="3-客户端生成公私钥"><a href="#3-客户端生成公私钥" class="headerlink" title="3. 客户端生成公私钥"></a>3. 客户端生成公私钥</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>文件位置在用户家目录下，如<code>Ubuntu</code>下就在<code>~/.ssh</code>下，由于是隐藏文件，请打开显示隐藏文件查看。</p><h2 id="4-上传公钥到服务器"><a href="#4-上传公钥到服务器" class="headerlink" title="4. 上传公钥到服务器"></a>4. 上传公钥到服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -p <span class="number">22</span> 用户名@服务器IP地址</span><br></pre></td></tr></table></figure><p>提示授权时 输入yes回车，然后提示输入服务器用户的密码。 手动复制到服务器上也行。</p><hr><p>手动复制如下，</p><blockquote><p>将客户端的<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件内的内容复制<br>粘贴到服务器端的<code>.ssh</code>文件夹下的<code>authorized_keys</code>文件内。<br>如果服务器端<code>authorized_keys</code>文件不存在，请自行创建。</p></blockquote><h2 id="5-连接服务器"><a href="#5-连接服务器" class="headerlink" title="5. 连接服务器"></a>5. 连接服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@服务器地址</span><br></pre></td></tr></table></figure><h2 id="6-给服务器取别名，免除每次要输入地址"><a href="#6-给服务器取别名，免除每次要输入地址" class="headerlink" title="6. 给服务器取别名，免除每次要输入地址"></a>6. 给服务器取别名，免除每次要输入地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/<span class="built_in">config</span>  </span><br><span class="line"></span><br><span class="line">vim ~/.ssh/<span class="built_in">config</span></span><br></pre></td></tr></table></figure><p>然后在文件里输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">HostName 服务器IP地址</span><br><span class="line">User 你要连接的服务器上的用户名</span><br><span class="line">Port <span class="number">22</span></span><br></pre></td></tr></table></figure><p>然后客户端使用<code>ssh 别名</code>即可连接服务器。<br>其实就是使用别名来代替用户名@IP这一串字符，22是SSH默认使用的端口号，不建议修改。</p><h2 id="7-文件传输"><a href="#7-文件传输" class="headerlink" title="7. 文件传输"></a>7. 文件传输</h2><ol><li><p>传文件的话，输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp 文件 用户名@域名/ip:服务器上的路径</span><br></pre></td></tr></table></figure><p>如果使用config文件配置过名称后，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 文件 别名:服务器上的路径</span><br></pre></td></tr></table></figure></li><li><p>同理，传送文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 文件夹 用户名@域名/ip:服务器上的路径</span><br></pre></td></tr></table></figure></li><li><p>下载远程文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp 用户名@域名/ip:远程文件的路径 本地路径</span><br></pre></td></tr></table></figure></li><li><p>下载远程文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> scp -r 用户名@域名/ip:远程文件夹的路径 本地路径</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>PS：如果需要连接<code>root</code>账号，需要修改服务器<code>/etc/ssh/sshd_config文件</code>,然后输入<code>service ssh restart</code>重启SSH服务。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#PermitRootLogin no   改为  PermitRootLogin yes；</span><br></pre></td></tr></table></figure><hr><h2 id="8-可能会用到的一些SSH命令"><a href="#8-可能会用到的一些SSH命令" class="headerlink" title="8. 可能会用到的一些SSH命令"></a>8. 可能会用到的一些SSH命令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证命令</span></span><br><span class="line">ssh -T 用户名@域名/ip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何使用SSH来远程连接电脑&quot;&gt;&lt;a href=&quot;#如何使用SSH来远程连接电脑&quot; class=&quot;headerlink&quot; title=&quot;如何使用SSH来远程连接电脑&quot;&gt;&lt;/a&gt;如何使用SSH来远程连接电脑&lt;/h1&gt;&lt;p&gt;本篇文章主要是描述如何使用&lt;code&gt;SSH&lt;/code&gt;来远程连接&lt;code&gt;Linux&lt;/code&gt;主机（Ubuntu）的用户，也适用于其他的Linux发行版。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://proudrabbit.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="SSH" scheme="https://proudrabbit.gitee.io/tags/SSH/"/>
    
  </entry>
  
</feed>
